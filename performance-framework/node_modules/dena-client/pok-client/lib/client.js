var request = require('request');
var util = require('util');
var querystring = require('querystring');

var Client = function () {
    this.fn = null;
    this.actions = [];
    this.caseData = {
        'previous': false,
        debug: 0,
        ratemode: 1
    };
    this.body = '',
    this.breathIntervalTime = 200;
    this.responseOverTime = 5000
};

module.exports = Client;

Client.prototype.run = function () {
    var self = this;
    var timer = setInterval(breath, self.breathIntervalTime);

    function breath() {
        if (self.fn === null) {
            self.fn = self.actions.shift();
            return
        }
        if (self.fn() === undefined) {
            if (self.actions.length) {
                self.fn = self.actions.shift();
            } else {
                console.log('clear timer', self.fns.length);
                clearInterval(timer);
            }
        }
    }
};

Client.prototype.randomIntTime = function (low, high) {
    var low = low || this.sendInterval * 500;
    var high = high || this.sendInterval * 1500;
    return Math.floor(Math.random() * (high - low + 1) + low);
}

Client.prototype.init = function (opts, cb) {
    this.port = opts.port;
    this.host = opts.host;
    this.sendInterval = opts.sendInterval || 10;
    this.headers = opts.headers || null
    setImmediate(cb);
}

Client.prototype.log = function (msg, name, level) {
    var self = this;
    var level = level || 'log';
    var name = name || 'robot';
    if (self.caseData.debug) {
        console[level]('%s - %s - %s - %s', new Date().toLocaleTimeString(), level, name, msg)
    }
}

Client.prototype.sendRequest = function (options, cb) {
    var self = this;
    var reqMethod = options['method'] || 'GET';
    self.path = self.host + options['path'];
    self.body = options['body'] || ""
    self.json = options['json'] || false
    if (!!options['body']) {
        if (reqMethod === 'GET') {
            self.path += querystring.stringify(options['body']);
        }
    }

    var _options = {
        method: reqMethod,
        url: self.path,
        headers: self.headers,
        body: self.body,
    }
    if (options['json']) _options['json'] = options['json']
    self.log(JSON.stringify(_options));
    request(_options, function (err, res, body) {
        if (err) {
            self.log(err, level = 'error')
            console.log(_options);
            cb(res.statusCode, err);
        } else {
            self.log(res.statusCode);
            self.log(JSON.stringify(body))
            cb(res.statusCode, body)
        }
    })
};
