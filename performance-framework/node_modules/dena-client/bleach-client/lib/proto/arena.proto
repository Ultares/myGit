
//
// 竞技场相关的协议
//

package Cmd;

import "basetype.proto";
import "arenatype.proto";

///	请求玩家竞技场数据
message ArenaInfoReq
{
	optional EProtoId	id		=	1		[default = ARENA_INFO_REQ];
}

///	返回玩家竞技场数据
message ArenaInfoRet
{
	optional EProtoId	id		=	1		[default = ARENA_INFO_RET];
	required ArenaInfo	info	=	2;		// 角色的竞技场数据
}

///	通知玩家竞技场排名
message ArenaRankNtf
{
	optional EProtoId	id		=	1		[default = ARENA_RANK_NTF];
	required uint32		rank	=	2;		// 角色的竞技场排名
}

///	请求竞技场随机玩家
message ArenaRandomRoleReq
{
	optional EProtoId	id		=	1		[default = ARENA_RANDOM_ROLE_REQ];
}

///	竞技场随机玩家服务器返回
message ArenaRandomRoleRet
{
	optional EProtoId		id		=	1		[default = ARENA_RANDOM_ROLE_RET];
	repeated ArenaRoleInfo	list	=	2;		// 随机玩家列表
}

/// 竞技场挑战玩家
message ArenaFightReq
{
	optional EProtoId	id		=	1		[default = ARENA_FIGHT_REQ];
	required uint64		roleid	=	2;		// 挑战角色id
}

///	竞技场挑战服务器返回
/*message ArenaFightRet
{
	optional EProtoId		id			= 1		[default = ARENA_FIGHT_RET];
	required ArenaRoleInfo	roleinfo	= 2;	// 被挑战者战斗力等信息
}
*/

///	购买挑战次数
message ArenaBuyTimesReq
{
	optional EProtoId	id		=	1		[default = ARENA_BUY_TIMES_REQ];
}

///	购买挑战次数服务器返回
message ArenaBuyTimesRet
{
	optional EProtoId	id				=	1		[default = ARENA_BUY_TIMES_RET];
	required uint32		lastbuytime		=	2;		// 最近一次购买时间
	required uint32		daybuytimes		=	3;		// 当天累计购买次数
	required uint32		unusedbuytimes	=	4;		// 未使用的购买次数
}

///	请求清除挑战cd
message ArenaClearCDReq
{
	optional EProtoId	id	=	1		[default = ARENA_CLEAR_CD_REQ];
}

///	清除cd服务器返回
message ArenaClearCDRet
{
	optional EProtoId	id	=	1		[default = ARENA_CLEAR_CD_RET];
}

///	请求竞技场排行榜
message ArenaRankListReq
{
	optional EProtoId	id	=	1		[default = ARENA_RANK_LIST_REQ];
}

///	竞技场排行榜服务器返回
message ArenaRankListRet
{
	optional EProtoId		id		=	1		[default = ARENA_RANK_LIST_RET];
	repeated ArenaRoleInfo	list	=	2;		// 排行榜列表
}

///	请求竞技场排行榜玩家基本信息
message ArenaRoleInfoReq
{
	optional EProtoId	id		=	1		[default = ARENA_ROLE_INFO_REQ];
	required uint64		roleid	=	2;		// 角色id
}

///	返回竞技场排行榜玩家基本信息
message ArenaRoleInfoRet
{
	optional EProtoId		id			=	1		[default = ARENA_ROLE_INFO_RET];
	required ArenaRoleInfo	roleinfo	=	2;		//排行榜角色信息
}

/// 放弃挑战匹配的对手
message ArenaGiveUpMatched
{
	optional EProtoId		id		=	1		[default = ARENA_GIVE_UP_MATCHED];
}

// 获取竞技场战报
message ArenaRecordsReq
{
    optional EProtoId       id      =   1       [default = ARENA_RECORDS_REQ];
}

message ArenaRecordsRet
{
    optional EProtoId       id      =   1       [default = ARENA_RECORDS_RET];
    repeated ArenaRecInfo   list    =   2;
}
