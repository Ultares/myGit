
//
// 灵魂相关的协议
//

package Cmd;

import "basetype.proto";
import "soultype.proto";
import "itemtype.proto";


/// 发送灵魂数据给玩家
message SendSoulList
{
	optional EProtoId   id		=	1	[default = SEND_SOUL_LIST];
	repeated SoulInfo	list	=	2;	// 灵魂列表
}

/// 灵魂背包扩容
message SoulSetCapacityReq
{
	optional EProtoId   id		=	1	[default = SOUL_SET_CAPACITY_REQ];
}

/// 灵魂背包扩容服务器返回
message SoulSetCapacityRet
{
	optional EProtoId   id			=	1	[default = SOUL_SET_CAPACITY_RET];
	required uint32		capacity	=	2;	// 扩容后容量
}

/// 装备灵魂
message SoulEquipReq
{
	optional EProtoId   id			=	1	[default = SOUL_EQUIP_REQ];
	repeated SoulIndex	list		=	2;	// 灵魂装备列表,9个格子的信息都发过来,而且必须按位置升序排列
}

/// 装备灵魂服务器返回
message SoulEquipRet
{
	optional EProtoId   id			=	1	[default = SOUL_EQUIP_RET];
	repeated SoulIndex	list		=	2;	// 灵魂装备列表,原样返回
}

/// 灵魂融合
message SoulMergeReq
{
	optional EProtoId   id			=	1	[default = SOUL_MERGE_REQ];
	required uint64		thisid		=	2;	// 灵魂实例id
	repeated uint64		uselist		=	3;	// 被融合的灵魂列表
}

/// 灵魂融合服务器返回
message SoulMergeRet
{
	optional EProtoId   id			=	1	[default = SOUL_MERGE_RET];
	required uint64		thisid		=	2;	// 灵魂实例id
	required uint64		newexp		=	3;	// 灵魂新的经验
	required uint32		newlevel	=	4;	// 灵魂新的等级
	repeated uint64		uselist		=	5;	// 被融合的灵魂列表
}

/// 灵魂进化
message SoulEvolutReq
{
	optional EProtoId   id			=	1	[default = SOUL_EVOLUT_REQ];
	required uint64		thisid		=	2;	// 灵魂实例id
	repeated uint64		uselist		=	3;	// 被消耗的灵魂列表
}

/// 灵魂进化服务器返回
message SoulEvolutRet
{
	optional EProtoId   id			=	1	[default = SOUL_EVOLUT_RET];
	required uint64		thisid		=	2;	// 灵魂实例id
	required uint64		newstar		=	3;	// 灵魂新的星级
	repeated uint64		uselist		=	4;	// 被消耗的灵魂列表
}

/// 新增灵魂数据
message NewSoulList
{
	optional EProtoId   id			=	1	[default = NEW_SOUL_LIST];
	repeated SoulInfo	list		=	2;	// 新增灵魂列表
}

//灵魂升阶请求
message SoulUpgradeReq
{
	optional EProtoId id			=	1	[default = SOUL_UPGRADE_REQ];
	required uint64	 thisid			=	2; //灵魂id
}

message SoulUpgradeRet
{
	optional EProtoId id			=	1	[default = SOUL_UPGRADE_RET];
	required uint64	 thisid			=	2;  //灵魂id
	required uint64  grade			=	3;  //灵魂升阶级别
}

message SoulfightInfoReq
{
	optional EProtoId id			=	1	[default = SOULFIGHT_INFO_REQ];
}

message SoulfightInfoRet
{
	optional EProtoId id			=	1	[default = SOULFIGHT_INFO_RET];
	required uint32 grade = 2;			//灵魂热斗级别
	required uint32 refreshTimes = 3;	//已经刷新次数
	required uint32 winCount = 4;		//胜利次数
	required uint32 drawFlag = 5;		//抽奖flag 从低位按位计算 1表示已经领取过
	repeated uint64 blade = 6;			//自己装备区的刀
	repeated SoulFightPlayer player = 7;	//热斗列表
}

message SoulFightDrawReq
{
	optional EProtoId id = 1 [default = SOULFIGHT_DRAW_REQ];
	required uint32 type = 2; //抽卡类型 1-免费 2-收费
	required uint32 cardid = 3;  //第几张卡 1-5
}

message SoulFightDrawRet
{
	optional EProtoId id = 1 [default = SOULFIGHT_DRAW_RET];
	repeated ItemNotiType item = 2; //收到的物品 多个物品前一个为增加物品
}

message SoulFightEquipBladeReq 
{
	optional EProtoId id = 1 [default = SOULFIGHT_EQUIP_BLADE_REQ];
	repeated uint32 blade = 2;  //自己装备的刀
}

message SoulFightEquipBladeRet 
{
	optional EProtoId id = 1 [default = SOULFIGHT_EQUIP_BLADE_RET];
	optional uint32 issuccess = 2; //0-失败 1-成功
}

message SoulFightBeginReq 
{
	optional EProtoId id = 1 [default = SOULFIGHT_BEGIN_REQ];
	required uint32 stage = 2; // 1-15 第几个人
}

message SoulFightRefreshReq
{
	optional EProtoId id = 1 [default = SOULFIGHT_REFRESH_REQ];
}

message SoulFightRefreshRet
{
	optional EProtoId id = 1 [default = SOULFIGHT_REFRESH_RET];
}
