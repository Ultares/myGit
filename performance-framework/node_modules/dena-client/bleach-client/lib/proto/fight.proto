//
// 战斗相关的协议
//

package Cmd;

import "basetype.proto";
import "fighttype.proto";

//走路指令
message MessageWalkCommand
{
optional EProtoId 		id   		= 1		[default = FIGHT_WALK_CS];
optional uint64			unitid		= 2;	// 玩家ID
}

//跑步指令
message MessageRunCommand
{
optional EProtoId 		id   		= 1		[default = FIGHT_RUN_CS];
optional uint64			unitid		= 2;	// 玩家ID
}

//跳跃指令
message MessageJumpCommand
{
optional EProtoId 		id   		= 1		[default = FIGHT_JUMP_CS];
optional uint64			unitid		= 2;	// 玩家ID
}

//方向变更指令
message MessageDirectCommand
{
optional EProtoId 		id   		= 1		[default = FIGHT_DIRECT_CS];
optional uint64			unitid		= 2;	// 玩家ID
optional int32			dir			= 3;	// 方向标记
}

//攻击指令
message MessageAttackCommand
{
optional EProtoId 		id   		= 1		[default = FIGHT_ATTACK_CS];
optional uint64			unitid		= 2;	// 玩家ID
}

//技能指令
message MessageSkillCommand
{
optional EProtoId 		id   		= 1		[default = FIGHT_SKILL_CS];
optional uint64			unitid		= 2;	// 玩家ID
optional string 		type		= 3;	// 技能类型
}

//预备指令
message MessageReadyCommand
{
optional EProtoId		id   		= 1		[default = FIGHT_READY_CS];
optional uint64			unitid		= 2;	// 玩家ID
}

//血量变更指令
message MessageBloodCommand
{
optional EProtoId 		id   		= 1		[default = FIGHT_BLOOD_S];
optional FightUnitInfo	unit		= 2;	// 战斗单位
optional int32	 		blood		= 3;	// 剩余血量
}

//死亡指令
message MessageDieCommand
{
optional EProtoId 		id   		= 1		[default = FIGHT_DIE_S];
optional FightUnitInfo	unit		= 2;	// 战斗单位
}

// 等待结果
message MessageWaitResultCommand
{
optional EProtoId 		id   		= 1		[default = FIGHT_WAITRESULT_C];
optional int32 			timestamp	= 2;	// 时间戳
optional uint64         winner      = 3;    // 胜利者角色id
}

// 开始放技能
message MessageReleaseSkillCommand
{
optional EProtoId 		id 			= 1 	[default = FIGHT_RELEASESKILL_C];
required uint64 		roleid 		= 2;	// 释放角色id
required int32 			skillid 	= 3;	// 技能id
required int32 			timestamp 	= 4; 	// 释放时间
required int32          type        = 5;    // 1技能和普攻 2拔刀技
}

// 开始释放风行道具
message MessageReleaseBulletCommand
{
optional EProtoId       id          = 1     [default = FIGHT_RELEASEBULLET_C];
required int32          index       = 2;    // 飞行道具索引
required int32          bulletid    = 3;    // 飞行道具id
required uint64         unitid      = 4;    // 释放人id
required int32          belongid    = 5;    // 飞行道具所属id 技能id 或者 buffid
required int32          type        = 6;    // 1 技能id 2 buff发射
required int32          time        = 7;    // 时间
}

// 结束释放飞行道具
message MessageEndBulletCommand
{
optional EProtoId       id          = 1     [default = FIGHT_ENDBULLET_C];
required int32          index       = 2;    // 飞行道具索引
required uint64         unitid      = 3;    // 释放人id
}

//击打消息包
message MessageHitCommand
{
optional EProtoId 			id			= 1		[default = FIGHT_HIT_C];
repeated FightHit 			list		= 2;	// 击打列表
}

//战斗结果
message MessageResultCommand
{
optional EProtoId 		id			= 1		[default = FIGHT_RESULT_S];
required eFightResult	result		= 2;	// 结果
}

//战斗结算
message MessageCalculateCommand
{
optional EProtoId 			id			= 1		[default = FIGHT_CALCULATE_S];
optional int32				maxhitnumer	= 2;	// 最大连击数
optional int32				damagerate	= 3;	// 连击伤害比例
optional int32				passtime	= 4;	// 通关时间(ms)
required eFightScoreLevel	score		= 5;	// 评分
optional int32				awardsexp	= 6;	// 获得的经验奖励
optional int32				awardscoin	= 7;	// 获得的金币奖励
optional int32              awardslinzi = 8;    // 获得的灵子奖励
repeated MixUnits           awardfix    = 9;    // 获得的固定奖励
repeated MixUnits           awardrandom = 10;   // 获得的随机奖励
}

//离开战斗
message MessageLeaveCommand
{
optional EProtoId 			id			= 1		[default = FIGHT_LEAVE_S];
optional uint64				unitid		= 2;	// 离开的玩家ID
}

//取消同步
message MessageSuspendCommand
{
optional EProtoId 			id			= 1		[default = FIGHT_SUSPEND_S];
optional uint64				unitid		= 2;	// 需要取消同步的玩家ID
}

// 复活命令
message MessageReviveCommand
{
optional EProtoId 			id		= 1		[default = FIGHT_REVIVE_S];
optional uint64				unitid	= 2;	// 玩家ID
}

// 死亡后等待复活指令
message MessageWait4ReviveCommand
{
optional EProtoId 			id 			= 1 	[default = FIGHT_WAIT4REVIVE_S];
optional int32 				seconds  	= 2;	// 等待时间
}

// 全部死亡
message MessageDestroyCommand
{
optional EProtoId 			id 			= 1 	[default = FIGHT_DESTROY_S];
}

// 切换战斗地图
message MessageCrossSceneRequest
{
optional EProtoId           id          = 1     [default = FIGHT_CROSS_C];
optional int32              mapid       = 2;
}

// 切换后可以开打通知
message MessageCrossSceneNotify
{
optional EProtoId           id          = 1     [default = FIGHT_CROSS_S];
}

// 战斗中换刀
message MessageChangeSwordRequest
{
optional EProtoId 			id 			= 1 	[default = FIGHT_CHANGESWORD_C];
optional int32 				swordid 	= 2;	// 刀id
optional uint64             unitid     	= 3;    // 换刀人id
required int32 				time 		= 4; 	// 时间
}

// 战斗中换刀服务器返回
message MessageChangeSwordResponse
{
optional EProtoId 			id 			= 1 	[default = FIGHT_CHANGESWORD_S];
}

message MessageBufferRequest
{
optional EProtoId 			id 			= 1 	[default = FIGHT_BUFF_C];
required uint64 			caster 		= 2;	// 释放者
required uint64 			agenter		= 3; 	// 作用者
required int32 				buffid 		= 4; 	// buffid
required uint64 			timestamp 	= 5; 	// 作用时间
}

message MessageEndBufferRequest
{
optional EProtoId           id          = 1     [default = FIGHT_ENDBUFF_C];
repeated uint64			    agentlist   = 2;    // 作用者
required int32              buffid      = 3;    // buffid
required uint64             timestamp   = 4;    // 作用时间
}

message MessageDyingCommand
{
optional EProtoId           id          = 1     [default = FIGHT_DYING_C];
optional FightUnitInfo      killer      = 2;    // 杀手
optional FightUnitInfo      dead        = 3;    // 死者
}

message MessageSyncRewardRequest
{
optional EProtoId 			id 			= 1 	[default = FIGHT_SYNCREWARD_C];
optional uint32             battletype  = 2;    // 战斗类型 8 攻击战斗 9 防御战斗 10 增强战斗
optional uint32 			index 		= 3; 	// 奖励段
}

message MessageSyncCommand
{
optional EProtoId 			id 			= 1 	[default = FIGHT_SYNC_CS];
optional uint64 			timestamp  	= 2; 	// 时间戳
optional uint64 			instanceid 	= 3; 	// 实例号
optional uint64 			targetid 	= 4; 	// 目标id
optional uint32 			compid 		= 5; 	// comp号
optional bytes 				packdata 	= 6; 	// 数据
repeated uint64             unitid      = 7;    // 转发玩家
}

message MessageSoulFightRewardResponse
{
optional EProtoId           id              = 1     [default = FIGHT_SOULFIGHT_S];
optional uint32             skillpoint      = 2;    // 奖励的灵子
optional bool               isperfect       = 3;    // 是否完美
repeated SoulFightBladeCp   blades          = 4;    // 斩魄刀恢复灵压
}

message MessageFightAgainRequest
{
optional EProtoId       id          = 1     [default = FIGHT_FIGHTAGAIN_C];
}

message MessageFightAgainResponse
{
optional EProtoId       id          = 1     [default = FIGHT_FIGHTAGAIN_S];
}
