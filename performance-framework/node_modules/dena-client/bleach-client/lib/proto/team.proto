
//
// PVP组队相关的协议
//

package Cmd;

import "basetype.proto";
import "teamtype.proto";

///	创建队伍
message CreateTeamReq 
{
	optional EProtoId   id			=	1	[default = CREATE_TEAM_REQ];
	required uint32		teamtype	=	2;	// 队伍类型
}

///	创建队伍服务器返回
message CreateTeamRet 
{
	optional EProtoId   id			=	1	[default = CREATE_TEAM_RET];
	required uint32		teamid		=	2;	// 房间id
}

///	邀请加入指定队伍
message InviteJoinTeamReq 
{
	optional EProtoId   id			=	1	[default = INVITE_JOIN_TEAM_REQ];
	required uint32		teamid		=	2;	// 队伍实例id
}

///	邀请加入队伍服务器返回
message InviteJoinTeamRet 
{
	optional EProtoId   id			=	1	[default = INVITE_JOIN_TEAM_RET];
}
///	加入指定队伍
message JoinTeamReq 
{
	optional EProtoId   id			=	1	[default = JOIN_TEAM_REQ];
	required uint32		teamid		=	2;	// 队伍实例id
	required uint32		serverid	=	3;	// 所在服务器id
}

///	加入队伍服务器返回
message JoinTeamRet 
{
	optional EProtoId   id			=	1	[default = JOIN_TEAM_RET];
	required uint32		teamid		=	2;
	required uint32		leader		=	3;
	required uint32		createtime	=	4;
	repeated uint32		member		=	5;
}

///	快速匹配队伍
message MatchTeamReq 
{
	optional EProtoId   id			=	1	[default = MATCH_TEAM_REQ];
	required uint32		type		=	2;	// 队伍类型
}

///	快速匹配队伍服务器返回
message MatchTeamRet 
{
	optional EProtoId   id		=	1	[default = MATCH_TEAM_RET];
}

///	退出队伍
message QuitTeamReq 
{
	optional EProtoId   id		=	1	[default = QUIT_TEAM_REQ];
	required uint32		teamid	=	2;	// 队伍id
}

///	退出队伍服务器返回
message QuitTeamRet 
{
	optional EProtoId   id		=	1	[default = QUIT_TEAM_RET];
}

///	踢出队伍
message KickOutTeamReq 
{
	optional EProtoId   id			=	1	[default = KICK_OUT_TEAM_REQ];
	required uint64		roleid		=	2;	// 队伍id
}

///	踢出队伍服务器返回
message KickOutTeamRet 
{
	optional EProtoId   id		=	1	[default = KICK_OUT_TEAM_RET];
}

///	开始组队战斗
message StartTeamFightReq 
{
	optional EProtoId   id		=	1	[default = START_TEAM_FIGHT_REQ];
	required uint32		type	=	2;	// 队伍类型
}

///	开始组队战斗服务器返回
message StartTeamFightRet 
{
	optional EProtoId   id		=	1	[default = START_TEAM_FIGHT_RET];
}

///	玩家请求队伍列表
message TeamListReq 
{
	optional EProtoId   id		=	1	[default = TEAM_LIST_REQ];
	required uint32		type	=	2;	// 队伍类型
}

///	服务器返回队伍列表
message TeamListRet 
{
	optional EProtoId   id		=	1	[default = TEAM_LIST_RET];
	repeated TeamInfo	list	=	2;	// 队伍列表
}
