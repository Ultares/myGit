package msg.hero;

import "herotype.proto";

//
// 命令字定义
//
enum MessageHero
{
	eMessageHero_HeroList_C 		= 0x1201;	// 英雄列表请求
	eMessageHero_HeroList_S 		= 0x1202;	// 英雄列表回应
	eMessageHero_Compound_C 		= 0x1203;	// 合成英雄请求
	eMessageHero_Compound_S 		= 0x1204;	// 合成英雄回应
	eMessageHero_ChangeState_C		= 0x1205;	// 改变英雄状态
	eMessageHero_ChangeState_S 		= 0x1206;	// 英雄状态返回
	eMessageHero_SetLeader_C 		= 0x1207;	// 设置队长请求
	eMessageHero_SetLeader_S 		= 0x1208;	// 设置队长返回
	eMessageHero_SetFormation_C 	= 0x1209;	// 设置阵型
	eMessageHero_SetFormation_S 	= 0x120A;	// 设置阵型返回
	eMessageHero_Evolve_C 			= 0x120B;	// 角色进化
	eMessageHero_Evolve_S 			= 0x120C;	// 角色进化
	eMessageHero_Upgrade_C 			= 0x120D;	// 角色升星
	eMessageHero_Upgrade_S 			= 0x120E;	// 角色升星
	eMessageHero_Promote_C 			= 0x120F;	// 角色突破
	eMessageHero_Promote_S 			= 0x1210;	// 角色突破
	eMessageHero_NewHero_S 			= 0x1211;	// 获得新英雄
	eMessageHero_SkillUpLevel_C		= 0x1212;	// 技能升级请求
	eMessageHero_SkillUpLevel_S		= 0x1213;	// 技能升级回应
	eMessageHero_NewSkill_S			= 0x1214;	// 通知客户端学习到新技能
	eMessageHero_GetHeroInfo_C 		= 0x1215;	// 获取英雄信息
	eMessageHero_GetHeroInfo_S 		= 0x1216;	// 获取英雄信息返回
};

//
// 错误码定义
//
enum ErrorcodeHero
{
	eErrorcodeHero_Success 					= 0x000000;	// 成功

	eErrorcodeHero_Compounded 				= 0x120301;	// 英雄已经被招募过
	eErrorcodeHero_InvalidHeroID4			= 0x120302;	// 非法的英雄ID
	eErrorcodeHero_DebrisNotEnough			= 0x120303;	// 招募所需的碎片不足
	eErrorcodeHero_HeroNotOpen				= 0x120304;	// 英雄暂未开放

	eErrorcodeHero_InvalidHeroID3			= 0x120501;	// 非法的英雄ID
	eErrorcodeHero_SameState				= 0x120502;	// 英雄状态相同
	eErrorcodeHero_InvalidFormationPos		= 0x120503;	// 非法的阵型位置
	eErrorcodeHero_HavebeStand				= 0x120504;	// 该位置上有英雄站位
	eErrorcodeHero_ChangeLeaderStatus 		= 0x120505;	// 不能修改队长状态

	eErrorcodeHero_SetLeaderInvalidHeroID	= 0x120701;	// 英雄未招募
	eErrorcodeHero_SetLeaderNotFighting		= 0x120702;	// 英雄未出站
	eErrorcodeHero_SetLeaderNotLeader		= 0x120703;	// 英雄不能作为队长
	eErrorcodeHero_SetLeaderInnerError		= 0x120704;	// 内部错误
	eErrorcodeHero_hasLeader				= 0x120705; // 已经是队长
	eErrorcodeHero_LeaderCannotInSubstitute = 0x120706;	// 队长不能在替补区
	eErrorcodeHero_SetLeaderCannotBeLeader  = 0x120707;	// 英雄未上阵不能作为队长

	eErrorcodeHero_InvalidFormationPos2		= 0x120901;	// 非法的阵型位置
	eErrorcodeHero_FormatInvalidHeroID		= 0x120902;	// 非法英雄id
	eErrorcodeHero_LeaderCannotDown			= 0x120903;	// 队长不可以下阵
	eErrorcodeHero_FormationInnerError		= 0x120904;	// 内部错误
	eErrorcodeHero_HeroNotinFormation		= 0x120905;	// 英雄不在阵中
	eErrorcodeHero_LeaderCannotInSubstitute1= 0x120906;	// 队长不能在替补区
	eErrorcodeHero_FightFull				= 0x120907;	// 出战位已满
	eErrorcodeHero_SubstituteInvalid		= 0x120908; // 替补位不可站立

	eErrorcodeHero_InvalidHeroID1       	= 0x120B01; // 非法的英雄ID
    eErrorcodeHero_QualityLimit         	= 0x120B02; // 英雄已经达到最高品质
	eErrorcodeHero_QualityConfigNotFound	= 0x120B03;	// 英雄品质配置未找到
	eErrorcodeHero_NotReachLevel			= 0x120B04;	// 英雄进化等级不足
	eErrorcodeHero_NotEnoughMaterials 		= 0x120B05;	// 进化所需材料不足

	eErrorcodeHero_InvalidHeroID2       	= 0x120D01; // 非法的英雄ID
    eErrorcodeHero_StarLimit           	 	= 0x120D02; // 英雄已经达到最高星级
	eErrorcodeHero_StarConfigNotFound 		= 0x120D03;	// 英雄星级配置未找到
	eErrorcodeHero_DebrisNotEnough2			= 0x120D04;	// 升星所需碎片不足

	eErrorcodeHero_SkillInvalidHeroID		= 0x121201; // 非法的英雄ID
	eErrorcodeHero_SkillInvalidID 			= 0x121202; // 非法的技能id
	eErrorcodeHero_SkillMaxLevel 			= 0x121203;	// 技能已达最高等级
	eErrorcodeHero_SkillNotEnoughPoint		= 0x121204;	// 技能点不足
	eErrorcodeHero_SkillNotEnoughCoin		= 0x121205;	// 金币不足
	eErrorcodeHero_SkillNotReachLevel		= 0x121206;	// 英雄等级不足
	eErrorcodeHero_SkillNotLearn 			= 0x121207;	// 技能还未激活
	eErrorcodeHero_SkillInnerError 			= 0x121208; // 技能升级内部错误

	eErrorcodeHero_InvalidRoleID			= 0x121501;	// 角色不存在
	eErrorcodeHero_InvalidHeroID5			= 0x121502;	// 该英雄已经下阵
};

//
// 消息定义
//

// 英雄列表
message MessageHeroListRequest
{
	optional MessageHero 		id 			= 1 [ default = eMessageHero_HeroList_C ];
};
message MessageHeroListResponse
{
	optional MessageHero 		id 			= 1 [ default = eMessageHero_HeroList_S ];
	required uint32 			leader 		= 2;					// 队长
	repeated HeroInfo 			group 		= 3;					// 战队
	repeated uint32 			formation 	= 4 [ packed = true ];	// 阵型
};

// 合成英雄
message MessageCompoundHeroRequest
{
	optional MessageHero 		id 		 	= 1 [ default = eMessageHero_Compound_C ];
	required uint32 			heroid 		= 2;	// 需要招募的英雄
};
message MessageCompoundHeroResponse
{
	optional MessageHero 		id 			= 1 [ default = eMessageHero_Compound_S ];
	required HeroInfo 			hero 		= 2;	// 新招募的英雄信息
};

// 改变英雄状态
message MessageChangeStateRequest
{
	optional MessageHero 		id 			= 1 [ default = eMessageHero_ChangeState_C ];
	required uint32 			heroid 		= 2; 	// 英雄ID
	required HeroState 			state 		= 3;	// 状态
	optional uint32 			position	= 4;	// 上阵位置
};
message MessageChangeStateResponse
{
	optional MessageHero 		id 			= 1 [ default = eMessageHero_ChangeState_S ];
	required uint32 			heroid 		= 2;	// 英雄ID
	required HeroState 			state 		= 3;	// 状态
};

// 设置队长
message MessageSetLeaderRequest
{
	optional MessageHero 		id 			= 1 [ default = eMessageHero_SetLeader_C ];
	required uint32 			leaderid 	= 2;	// 队长ID
};
message MessageSetLeaderResponse
{
	optional MessageHero 		id 			= 1 [ default = eMessageHero_SetLeader_S ];
	required uint32 			leaderid 	= 2;	// 新队长ID
	repeated uint32 			formation 	= 3 [ packed = true ];
};

// 设置阵型
message MessageSetFormationRequest
{
	optional MessageHero 		id 			= 1 [ default = eMessageHero_SetFormation_C ];
	required uint32 			hero 		= 2;	// 英雄
	required uint32 			position 	= 3;	// 位置
};
message MessageSetFormationResponse
{
	optional MessageHero 		id 			= 1 [ default = eMessageHero_SetFormation_S ];
	repeated uint32 			formation 	= 2 [ packed = true ];
};

// 角色进化
message MessageHeroEvolveRequest
{
	optional MessageHero 		id 			= 1 [ default = eMessageHero_Evolve_C ];
	optional uint32  			heroid 	 	= 2;	// 英雄ID
};
message MessageHeroEvolveResponse
{
	optional MessageHero 		id 			= 1 [ default = eMessageHero_Evolve_S ];
	optional uint32  			heroid 	 	= 2;	// 英雄ID
	optional uint32 			quality 	= 3;	// 新品质
};

// 角色升星
message MessageHeroUpgradeRequest
{
	optional MessageHero 		id 			= 1 [ default = eMessageHero_Upgrade_C ];
	optional uint32 			heroid 		= 2;	// 英雄ID
};
message MessageHeroUpgradeResponse
{
	optional MessageHero 		id 		 	= 1 [ default = eMessageHero_Upgrade_S ];
	optional uint32 			heroid 		= 2;	// 英雄ID
	optional uint32 			star 		= 3;	// 新星级
};

// 获得新的英雄
message MessageNewHeroNotify
{
	optional MessageHero 		id 			= 1 [ default = eMessageHero_NewHero_S ];
	repeated HeroInfo 			hero 	 	= 2;	// 新的英雄信息
};

// 技能升级
message MessageSkillUpLevelRequest
{
	optional MessageHero 		id 			= 1 [ default = eMessageHero_SkillUpLevel_C ];
	required uint32 			heroid 		= 2;	// 英雄id
	required uint32 			skillid		= 3;	// 技能id
};
message MessageSkillUpLevelResponse
{
	optional MessageHero 		id 			= 1 [ default = eMessageHero_SkillUpLevel_S ];
	required uint32 			heroid 		= 2;	// 英雄id
	required uint32 			skillid 	= 3;	// 技能id
	required uint32 			level		= 4;	// 技能等级
};

// 通知客户端学习了新技能
message MessageNewSkillNotify
{
	message Skill
	{
		required uint32 		id 			= 1;	// 技能id
		required uint32 		level 		= 2;	// 技能等级
	};

	optional MessageHero 		id 			= 1 [ default = eMessageHero_NewSkill_S ];
	required uint32 			heroid 		= 2;	// 英雄id
	repeated Skill 				skills 		= 3;	// 新学的技能列表
};

message MessageGetHeroInfoRequest
{
	optional MessageHero 		id 			= 1 [ default = eMessageHero_GetHeroInfo_C ];
	required uint64 			roleid 		= 2;	// 角色ID
	required uint32 			heroid 		= 3;	// 英雄ID
};
message MessageGetHeroInfoResponse
{
	// 装备
	message EquipInfo
	{
		required 	uint32 		baseid 		= 1;	// 装备ID
		required 	uint32 		level 		= 2;	// 等级
		required 	uint32 		quality 	= 3;	// 品质
		required 	uint32 		position 	= 4;	// 位置
	};

	// 技能
	message SkillInfo
	{
		required 	uint32 		spellid 	= 1;	// 技能ID
		required 	uint32 		level 		= 2;	// 等级
	};

	optional MessageHero 		id 			= 1 [ default = eMessageHero_GetHeroInfo_S ];
	required uint64 			roleid 		= 2;	// 角色ID
	required uint32 			heroid 		= 3;	// 英雄ID
	required uint32 			level 		= 4;	// 等级
	required uint32 			star 		= 5;	// 星级
	required uint32 			quality 	= 6;	// 品质
	required uint32 			battlepoint = 7;	// 战斗力
	repeated SkillInfo 			skilltree 	= 8;	// 技能树
	repeated EquipInfo 			equippanel 	= 9;	// 装备面板
};
