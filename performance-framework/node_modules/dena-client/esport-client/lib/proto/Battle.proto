package protocol;
import "Team.proto";
import "PlayerBasic.proto";
import "Card.proto";

// 战斗类型
enum EBattleType {
  BATTLE_TYPE_INVALID = 0;
  BATTLE_TYPE_PVE = 1;
  BATTLE_TYPE_ARENA = 2;
  BATTLE_TYPE_SNAKE = 3;
  BATTLE_TYPE_GLORY = 4;
  BATTLE_TYPE_RECRUIT = 5;
  BATTLE_TYPE_STARGAME = 6;
}

// 回合类型
enum EBattleRoundType {
  BATTLE_ROUND_TYPE_GAME_START = 0;                 // 开始
  BATTLE_ROUND_TYPE_GANK = 1;                       // Gank
  BATTLE_ROUND_TYPE_GROUP = 2;                      // 团战
  BATTLE_ROUND_TYPE_GAME_END = 3;                   // 结束
  BATTLE_ROUND_TYPE_NONE = 4;                       // ?
  BATTLE_ROUND_TYPE_PUSH = 5;                       // Push
}

// 各种称号
enum BattleTitleType {
  BATTLE_TITLE_TYPE_INVALID = 0;
  BATTLE_TITLE_TYPE_TANK = 1;                       // 坦克
  BATTLE_TITLE_TYPE_KILL = 2;                       // 击杀
  BATTLE_TITLE_TYPE_ATTACK = 3;                     // 高伤
  BATTLE_TITLE_TYPE_SUPPORT = 4;                    // 助攻王
  BATTLE_TITLE_TYPE_PUSH_TOWER = 5;                 // 推塔
  BATTLE_TITLE_TYPE_MVP = 6;                        // MVP
}

// 选手数据
message BattleCardData {
  optional ECardPosition position = 1;              // 位置
  optional uint32 hero_id = 2;                      // （回合外）使用的英雄
  optional uint32 score = 3;                        // （回合外）评分*1000
  repeated BattleTitleType titles = 4;              // （回合外）称号
  optional CardProp card_prop = 5;                  // （回合外、回合内）选手的card_id和战斗力
  // optional uint32 cast_skill = 6;                   // （回合内）是否施放技能，一个round里最多只有一个选手施放技能，0或nil表示没有施放技能
  // repeated uint32 buff_ids = 7;                     // （回合内）携带的buff
  repeated SkillData buffs = 8;                     // （回合内）受到的buff
  optional SkillData small_skills = 9;              // （回合内）释放的普通技能
  optional SkillData skill = 10;                    // （回合内）释放的大技能
  optional uint32 hero_level = 11;                  // （回合内）当前回合中这个选手的英雄的等级
}

// 战队数据
message BattleTeam {
  optional bool is_opponent = 1;                    // 用来区分自己还是对手：false表示自己，true表示对手
  optional BasicInfo basic_info = 2;                // （回合外）俱乐部名称、IconID、等级等信息
  repeated BattleCardData cards = 3;                // （回合外、回合内）五个位置的选手数据
  optional uint32 kill_count = 4;                   // （回合内）人头数
  optional uint32 battle_force = 5;                 // （回合内）战斗力
  optional uint32 hp = 6;                           // （回合内）回合结束时的分数
}

// 战斗回合信息
message BattleRound {
  optional uint32 round_id = 1;                     // 第几个回合，从1开始编号
  optional EBattleRoundType round_type = 2;         // 回合类型
  optional bool is_win = 3;                         // true表示本回合本方胜利，false表示本回合本方失败
  repeated BattleTeam teams = 6;                    // 不包括basic_info
  optional uint32 script_id = 7;                    // 剧本编号
  optional uint32 level = 8;                        // 英雄的平均等级
  repeated uint32 kill_towers = 9;                  // 灭掉的塔
  repeated uint32 valid_script_ids = 10;
}

// 战斗大致过程
message BattleInfo {
  optional EBattleType battle_type = 1;             // 战斗类型
  optional bool is_win = 2;                         // true表示本方胜利，false表示本方失败
  // repeated uint32 condition_ids = 3;                // 根据双方的属性值算出来的、用于表现的局势ID
  repeated BattleRound rounds = 4;                  // （回合内）各个回合的信息
  repeated BattleTeam teams = 5;                    // （回合外）双方的基本信息和结算信息
}

message BattleDetail {
}

// ===============================================================
// 通用战斗协议：
// 1）进入战斗的通知： 服务器将计算出的战斗结果和大致过程通知客户端。
message S2C_EnterBattle {
  optional BattleInfo battle_info = 1;
}
// 2）客户端根据战斗结果和局势ID进行AI的战斗表现，结束后将AI表现得到的统计信息发给服务器，
message C2S_LeaveBattle {
  optional BattleDetail battle_detail = 1;
}

