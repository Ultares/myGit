var request = require('request');
var util = require('util');
var httpreq = require('http').request
var querystring = require('querystring');

var Client = function () {
    this.fn = null;
    this.actions = [];
    this.fns = [];
    this.breathIntervalTime = 200;
    this.thinkTimeMin = 1000;
    this.thinkTimeMax = 3000;
    this.responseOverTime = 5000
    this.caseData = {
        previous: false,
        ratemode: false,
        debug: 1
    };
};

module.exports = Client;

Client.prototype.init = function (params, cb) {
    this.port = params.port;
    this.host = params.host;
    this.headers = {
        "Content-Type": "text/html"
    }
    setImmediate(cb);
}

Client.prototype.run = function () {

    var self = this;
    var timer = setInterval(breath, self.breathIntervalTime);

    function breath() {

        if (self.fn === null) {
            self.fn = self.actions.shift();
            return
        }

        if (self.fn() === undefined) {
            if (self.actions.length) {
                if (self.scenario) {
                    self.fns.push(self.fn);
                }
                self.fn = self.actions.shift();
            } else {
                console.log('clear timer', self.fns.length);
                clearInterval(timer);
            }
        }
    }
};

Client.prototype.randomIntTime = function (low, high) {
    var low = low || this.thinkTimeMin;
    var high = high || this.thinkTimeMax;
    return Math.floor(Math.random() * (high - low + 1) + low);
}

Client.prototype.httpRequest = function (path, body, cb) {
    var self = this;
    if (!!body) {
        self.reqstr = querystring.stringify(body);
        path += self.reqstr;
        if (self.caseData.debug) {
            console.log('Request API :%s', path);
        }
    }

    var options = {
        hostname: self.host,
        port: self.port,
        method: 'GET',
        path: path,
        agent: false,
        headers: self.headers
    };
    if (self.caseData.debug) {
        console.log('Request options :', JSON.stringify(options));
    }

    var req = httpreq(options, function (res) {
        res.setEncoding('utf8');
        var iMsg = '';
        res.on('data', function (chunk) {
            iMsg += chunk;
        });
        res.on('end', function () {


            //if (String(iMsg).indexOf(":")) {
            //    if (self.caseData.debug) {
            //        console.log('Received data :', typeof iMsg, iMsg)
            //    }
            //    cb(res.statusCode, iMsg);
            //    return
            //}

            data = JSON.parse(iMsg);

            if (data.code) {
                console.log('Error:', iMsg);
            } else {
                if (self.caseData.debug) {
                    console.log('Received data :', data)
                }
            }
            cb(res.statusCode, data);
        });
    });

    req.on('error', function (e) {
        console.error('action : %s, error : %s', path, e.toString());
        cb(e);
    });

    if (self.caseData.debug) {
        console.log('Send data :%s:%s%s ', options.hostname, options.port, options.path);
    }

    req.end();
};
