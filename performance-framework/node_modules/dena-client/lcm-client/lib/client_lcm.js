var request = require('request');
var util = require('util');
var httpsreq = require('https').request
var httpreq = require('http').request
var querystring = require('querystring');

var Client = function () {
    this.fn = null;
    this.actions = [];
    this.customValue = {};
    this.caseData = {
        'wid': 1,
        'previous': false,
        debug: 0
    };
    this.options = {};
    this.exectimes = 4;
    this.fns = [];
    this.breathIntervalTime = 200;
    this.thinkTimeMin = 3000
    this.thinkTimeMax = 5000;
    this.responseOverTime = 5000
};

module.exports = Client;

Client.prototype.run = function () {

    var self = this;
    var timer = setInterval(breath, self.breathIntervalTime);

    function breath() {
        if (self.fn === null) {
            self.fn = self.actions.shift();
            return
        }
        if (self.fn() === undefined) {
            if (self.actions.length) {
                self.fn = self.actions.shift();
            } else {
                console.log('clear timer', self.fns.length);
                clearInterval(timer);
            }
        }
    }
};

Client.prototype.getThinkTime = function () {
    return Math.ceil(Math.random() * this.thinkTimeMax / 1000);
}

Client.prototype.randomIntTime = function (low, high) {
    var low = low || this.thinkTimeMin;
    var high = high || this.thinkTimeMax;
    return Math.floor(Math.random() * (high - low + 1) + low);
}

Client.prototype.init = function (params, cb) {
    this.port = params.port;
    this.host = params.host;
    this.options = {
        headers: {
            "Content-Type": "text/html"
        }
    };
    setImmediate(cb);
}

Client.prototype.httpRequest = function (options, cb) {
    var self = this;
    self.do_request = request.get;
    options['ishttps'] = options['ishttps'] || false;
    self.httpProtocol = options['ishttps'] ? httpsreq : httpreq;
    var headers = (!!options['headers']) ? options['headers'] : {
        'Content-Type': 'application/json'
    };
    self.path = options['path'];
    if (!!options['Authorization']) headers['Authorization'] = options['Authorization'];
    if (!!options['host']) self.host = options['host'];
    if (!!options['port']) self.port = options['port'];

    if (!!options['body']) {
        self.reqstr = querystring.stringify(options['body']);
        if (options['method'] === 'GET') {
            self.path += self.reqstr;
        } else if (options['method'] === 'POST') {
            self.do_request = request.post
            if (headers['Content-Type'] == 'application/json') {
                self.body = JSON.stringify(options['body']);
                //console.log('self.body is :', self.body, typeof self.body)
            }
            else {
                self.body = querystring.stringify(options['body']);
            }
        }
    }

    var options_ = {
        method: options['method'],
        url: options['path'],
        headers: headers,
        body: self.body
    }

    self.do_request(options_, function (err, res, body) {
        if (err) {
            console.log('ERROR:', err);
            cb(res.statusCode, err);
        } else {
            if (self.caseData.debug) {
                console.log('res: [%s] and body [%s]', res.statusCode, body);
            }
            cb(res.statusCode, body)
        }
    })
};
