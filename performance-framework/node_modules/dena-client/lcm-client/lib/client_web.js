var request = require('request'); //.defaults({jar: true});
var util = require('util');
var httpsreq = require('https').request
var httpreq = require('http').request
var querystring = require('querystring');
var crypto = require('crypto');
var Client = function () {
    this.fn = null;
    this.actions = [];
    this.customValue = {};
    this.caseData = {
        'wid': 1,
        'previous': false,
        debug: 0
    };
    this.headers = {
        "Content-Type": "application/json",
        //"User-Agent": 'Mozilla/5.0 (Linux; U; Android 2.2; en-gb; GT-P1000 Build/FROYO) AppleWebKit'
    };
    this.reqFn = request;
    this.options = {};
    this.fns = [];
    this.breathIntervalTime = 200;
    this.thinkTimeMin = 3000;
    this.thinkTimeMax = 9000;
    this.responseOverTime = 5000
};

module.exports = Client;
Client.prototype.run = function () {
    var self = this;
    var timer = setInterval(breath, self.breathIntervalTime);

    function breath() {
        if (self.fn === null) {
            self.fn = self.actions.shift();
            return
        }
        if (self.fn() === undefined) {
            if (self.actions.length) {
                self.fn = self.actions.shift();
            } else {
                console.log('clear timer', self.fns.length);
                clearInterval(timer);
            }
        }
    }
};

var base64Encode = function (str) {
    var buf = new Buffer(str);
    return buf.toString("base64")
};

var getSignature = function (str, key, token) {
    var sign;
    key += '&';
    if (!!token) key += token;
    sign = crypto.createHmac('sha1', key).update(str).digest().toString('base64');
    console.log('====>', sign);
    return sign;
};

var md5Encode = function (str) {
    var md5 = crypto.createHash('md5');
    str += '89c6211882d426eae7e48786a3093d36';
    md5.update(str);
    return md5.digest('hex').substr(0, 16);
};

Client.prototype.getThinkTime = function () {
    return Math.ceil(Math.random() * this.thinkTimeMax / 1000);
}

Client.prototype.randomIntTime = function (low, high) {
    var low = low || this.thinkTimeMin;
    var high = high || this.thinkTimeMax;
    return Math.floor(Math.random() * (high - low + 1) + low);
}

Client.prototype.init = function (params, cb) {
    this.port = params.port;
    this.host = params.host;
    setImmediate(cb);
}

Client.prototype.httpRequest = function (options, cb) {
    var self = this;
    if (!!options['headers']) {
        for (key in options['headers']) {
            self.headers[key] = options['headers'][key];
        }
    }
    self.path = options['path'];
    if (!!options['host']) self.host = options['host'];
    if (!!options['port']) self.port = options['port'];
    if (!!options['body']) {
        self.str_ = querystring.stringify(options['str_']).replace('%20', ' ');
        if (options['method'] === 'GET') {
            self.str = base64Encode(self.str_);
            self.sig = md5Encode(self.str)
            self.path += 'str=' + self.str;
            self.path += '&sig=' + self.sig;
            self.reqstr = querystring.stringify(options['body']);
            self.path += '&';
            self.path += self.reqstr;
            if (self.caseData.debug) {
                console.log('self path =>', self.host + '/' + self.path + '<=')
            }
        } else if (options['method'] === 'POST') {
            self.reqFn = request.post;
            if (self.headers['Content-Type'] == 'application/json') {
                self.body = JSON.stringify(options['body']);
            }
        }
    }
    self.url = self.host + self.path;
    self.requestUrl = self.url;
    if (!!options['cookie']) {
        self.j = request.jar();
        self.cookie = request.cookie(options['cookie']);
        self.j.setCookie(self.cookie, self.url);
        self.requestUrl = {url: self.url, jar: self.j}
    }

    //if (self.caseData.debug) {
    //    console.log('Request url====>', self.requestUrl);
    //    console.log('With body  ====>', options.body);
    //}

    //self.reqFn(self.requestUrl, {form: options.body}, function (error, response, body) {
    self.reqFn(self.requestUrl, function (error, response, body) {
        var cData
        if (!error && response.statusCode == 200) {
            if (self.caseData.debug) {
                console.log('Response body ==>', body)
            }
            if (!!body.toString().length) {
                cb(response.statusCode, body);
            } else {
                cb(null);
            }
        } else {
            cb(error);
        }
    });
};

