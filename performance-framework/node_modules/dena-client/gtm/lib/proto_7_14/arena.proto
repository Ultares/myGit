package msg.arena;

import "base.proto";
import "arenatype.proto";

//
// 命令字定义
//
enum MessageArena
{
	eMessageArena_ArenaInfo_C 			= 0x1901;		// 竞技场信息
	eMessageArena_ArenaInfo_S 			= 0x1902;		// 竞技场信息返回
	eMessageArena_PKRecords_C 			= 0x1903;		// 获取对战记录
	eMessageArena_PKRecords_S 			= 0x1904;		// 对战记录返回
	eMessageArena_ClearPKCD_C 			= 0x1905;		// 清战斗CD
	eMessageArena_ClearPKCD_S 			= 0x1906;		// 清战斗CD返回
	eMessageArena_BuyPKTimes_C			= 0x1907;		// 购买战斗次数
	eMessageArena_BuyPKTimes_S 			= 0x1908;		// 购买战斗次数返回
	eMessageArena_DanRewards_S 			= 0x1909;		// 竞技场段位奖励
    eMessageArena_ArenaArticleInfo_C	= 0x190A;       // 竞技场商店信息
    eMessageArena_ArenaArticleInfo_S	= 0x190B;       // 竞技场商店信息返回
    eMessageArena_BuyArticle_C      	= 0x190C;       // 购买竞技场商店商品
    eMessageArena_BuyArticle_S      	= 0x190D;       // 购买竞技场商店商品回应
	eMessageArena_RefreshChallenges_C	= 0x190E;		// 刷新竞技场挑战列表
	eMessageArena_RefreshChallenges_S 	= 0x190F;		// 竞技场挑战列表返回
};

//
// 错误码定义
//
enum ErrorcodeArena
{
	eErrorcodeArena_Success 			= 0x000000;	// 成功
	eErrorcodeArena_CantFoundRecord 	= 0x190101;	// 竞技场未开放
	eErrorcodeArena_CantFoundRecord1	= 0x190301;	// 竞技场未开放
	eErrorcodeArena_CantClearCD			= 0x190501;	// 2B不需要清空CD
	eErrorcodeArena_ViplevelLimit		= 0x190502;	// VIP等级不足
	eErrorcodeArena_ClearNotEnoughMoney = 0x190503;	// 清CD的钱不够呀
	eErrorcodeArena_CantBuytimes		= 0x190701;	// 2B!次数还没有用完呢
	eErrorcodeArena_BuyTimesLimit		= 0x190702;	// 您今天的购买次数已经用完了
	eErrorcodeArena_BuyOneTimes 		= 0x190703;	// 亲, 只能一次次购买
	eErrorcodeArena_BuyNotEnoughMoney	= 0x190704;	// 购买次数的钱不够呀

	eErrorcodeArena_SystemNotOpen		= 0x190A01; // 竞技场功能未开启

	eErrorcodeArena_SystemNotOpen1 		= 0x190C01;	// 竞技场功能未开放
	eErrorcodeArena_InvalideArticleID 	= 0x190C02;	// 商品已下架
	eErrorcodeArena_TimesNotEnough		= 0x190C03;	// 购买次数已经用完
	eErrorcodeArena_InvalidDan			= 0x190C04;	// 级别不够，请继续努力
	eErrorcodeArena_BagNotEnough		= 0x190C05;	// 背包格子不足
	eErrorcodeArena_CoinNotEnough 		= 0x190C06; // 荣誉值不足
	eErrorcodeArena_CantFoundRecord2 	= 0x190E01;	// 未发现竞技场记录
	eErrorcodeArena_MoneyNotEnough		= 0x190E02;	// 您的魂玉不足
};

// 获取竞技场信息
message MessageGetArenaInfoRequest
{
	optional MessageArena 		id 		= 1 [ default = eMessageArena_ArenaInfo_C ];
};
message MessageGetArenaInfoResponse
{
	optional MessageArena 		id 			= 1 [ default = eMessageArena_ArenaInfo_S ];
	required uint32 			rank 		= 2;	// 排名
	required uint32 			toprank 	= 3;	// 最高排名
	required uint32 			wincount 	= 4;	// 胜利场次数
	required uint32 			pktimes 	= 5;	// 挑战次数
	required uint32 			buytimes	= 6;	// 购买次数
	required uint64 			cdtime 		= 7;	// 下次PK的时间
	repeated Opponent 			opponents 	= 8;	// 对手
};

// 获取对战记录
message MessageGetPKRecordsRequest
{
	optional MessageArena 		id 		 	= 1 [ default = eMessageArena_PKRecords_C ];
};
message MessageGetPKRecordsResponse
{
	message PKRecord
	{
		optional uint64 		roleid 		= 1;	// 对手角色ID
		required string 		rolename 	= 2;	// 角色名
		required uint32 		level 		= 3;	// 对手等级
		required uint32 		leader 		= 4;	// 队长
		required uint32 		method 		= 5;	// 方式, 1:挑战; 2:被挑战
		required uint32 		result 		= 6;	// 战斗结果, 0:平局; 1:获胜; 2:失败, 是否定义为BattleResult
		required uint64 		timestamp 	= 7;	// 挑战时间
		required uint32 		rankchg 	= 8;	// 排名变化
		required uint64 		reportid 	= 9;	// 战报ID
	};

	optional MessageArena 		id 			= 1 [ default = eMessageArena_PKRecords_S ];
	repeated PKRecord 			records 	= 2;	// 对战记录
};

// 竞技场清CD
message MessageClearPKCDRequest
{
	optional MessageArena 		id 			= 1 [ default = eMessageArena_ClearPKCD_C ];
};
message MessageClearPKCDResponse
{
	optional MessageArena 		id 			= 1 [ default = eMessageArena_ClearPKCD_S ];
	optional uint64 			cdtime 		= 2;	// CD时间, ==0
};

// 竞技场购买次数
message MessageBuyPKTimesRequest
{
	optional MessageArena 		id 			= 1 [ default = eMessageArena_BuyPKTimes_C ];
	optional uint32 			times 		= 2;	// 购买的次数
};
message MessageBuyPKTimesResponse
{
	optional MessageArena 		id 			= 1 [ default = eMessageArena_BuyPKTimes_S ];
	optional uint32 			times 		= 2;	// 购买的次数
};

// 竞技场段位奖励
message MessageDanRewardsNotify
{
	optional MessageArena 		id 			= 1 [ default = eMessageArena_DanRewards_S ];
	required uint32 			dan 		= 2;	// 段位
	repeated Resource 			rewards 	= 3;	// 奖励
};

// 竞技场商店信息
message MessageArenaArticleInfoRequest
{
    optional MessageArena       id          = 1 [ default = eMessageArena_ArenaArticleInfo_C ];
};
message MessageArenaArticleInfoResponse
{
    message BuyTimes
    {
        required uint32         id          = 1;    // 商品id
        required uint32         times       = 2;    // 商品购买次数
    };

    optional MessageArena       id          = 1 [ default = eMessageArena_ArenaArticleInfo_S ];
    repeated BuyTimes           times       = 2;
};

// 购买商品
message MessageBuyArticleRequest
{
    optional MessageArena       id          = 1 [ default = eMessageArena_BuyArticle_C ];
    required uint32             articleid   = 2;  // 商品id
};
message MessageBuyArticleResponse
{
    optional MessageArena       id          = 1 [ default = eMessageArena_BuyArticle_S ];
    required uint32             articleid   = 2; // 商品id
    optional uint32             times       = 3; // 已购买次数
};

// 刷新竞技场挑战列表
message MessageRefreshChallengesRequest
{
    optional MessageArena       id          = 1 [ default = eMessageArena_RefreshChallenges_C ];
};
message MessageRefreshChallengesResponse
{
    optional MessageArena       id          = 1 [ default = eMessageArena_RefreshChallenges_S ];
	repeated Opponent 			opponents 	= 2;	// 对手
};
