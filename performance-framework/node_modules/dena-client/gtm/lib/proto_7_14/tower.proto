package msg.tower;

import "base.proto";

//
// 命令字定义
//
enum MessageTower
{
	eMessageTower_TowerInfo_C 		= 0x1B01;		// 爬塔信息
	eMessageTower_TowerInfo_S 		= 0x1B02;		// 返回爬塔信息
	eMessageTower_FloorInfo_C 		= 0x1B03;		// 获取挂机信息
	eMessageTower_FloorInfo_S 		= 0x1B04;		// 爬塔挂机信息返回
	eMessageTower_GetRoleInfo_C 	= 0x1B05;		// 获取最近过关玩家信息
	eMessageTower_GetRoleInfo_S 	= 0x1B06;		// 返回最近过关玩家信息
	eMessageTower_FloorHostInfo_C	= 0x1B07;		// 楼层挂机信息
	eMessageTower_FloorHostInfo_S 	= 0x1B08;		// 楼层挂机信息返回
	eMessageTower_DrawRewards_C 	= 0x1B09;		// 领取区域奖励
	eMessageTower_DrawRewards_S 	= 0x1B0A;		// 返回领取的区域奖励
	eMessageTower_StartHost_C 		= 0x1B0B;		// 选择楼层挂机
	eMessageTower_StartHost_S 		= 0x1B0C;		// 选择楼层挂机
	eMessageTower_CancelHost_C 		= 0x1B0D;		// 取消楼层挂机
	eMessageTower_CancelHost_S 		= 0x1B0E;		// 取消楼层挂机
	eMessageTower_ClearRobCD_C 		= 0x1B0F;		// 清除掠夺CD
	eMessageTower_ClearRobCD_S 		= 0x1B10;		// 清除掠夺CD返回
	eMessageTower_EndHost_S 		= 0x1B1A;		// 终止挂机通知
	eMessageTower_HostingProtect_C 	= 0x1B1B;		// 挂机保护
	eMessageTower_HostingProtect_S 	= 0x1B1C;		// 挂机保护返回
};

//
// 错误码定义
//
enum ErrorcodeTower
{
	eErrorcodeTower_Success 			= 0x000000;		// 成功

	eErrorcodeTower_SystemNotOpened		= 0x1B0104;		// 系统未开放

	eErrorcodeTower_HavenotComplete		= 0x1B0301;		// 骚年～尼玛还没有打过就想扫荡！
	eErrorcodeTower_AreaConfigError		= 0x1B0302;		// 不要急，策划小哥正在查配置呢~
	eErrorcodeTower_NontEnoughStrength	= 0x1B0303;		// 刘二吊小声提醒您，丫的体力不够呀
	eErrorcodeTower_HighFloorInvalid 	= 0x1B0304;		// 最高楼层非法

	eErrorcodeTower_FloorInvalid 		= 0x1B0501;		// 楼层非法了
	eErrorcodeTower_RoleIDInvalid 		= 0x1B0502;		// 磊大爷已经删掉这丫的通关记录了

	eErrorcodeTower_FloorInvalid2 		= 0x1B0701;		// 楼层非法
	eErrorcodeTower_CantGetHostInfo		= 0x1B0702;		// 您不能取到该层的挂机信息

	eErrorcodeTower_GotRewards			= 0x1B0901;		// 小样～你今天已经领过了呀～
	eErrorcodeTower_RewardsIsEmpty		= 0x1B0902;		// 策划小哥没有配奖励哦～
	eErrorcodeTower_BagIsFull			= 0x1B0903;		// 亲～快点清理一下背包吧～待会再来哦
	eErrorcodeTower_AreaInvalid 		= 0x1B0904;		// 站台非法了

	eErrorcodeTower_FloorInvalid3 		= 0x1B0B01;		// 挂机楼层非法
	eErrorcodeTower_GetTotalSlotsError	= 0x1B0B02;		// 该楼层没有挂机位置
	eErrorcodeTower_HostSlotFull		= 0x1B0B03;		// 该层没有空闲的挂机位置
	eErrorcodeTower_InvalidSlot			= 0x1B0B04;		// 您选择的挂机位置是非法的
	eErrorcodeTower_HaveRoleHosting		= 0x1B0B05;		// 该位置已经有人正在挂机
	eErrorcodeTower_GetHostRecordError	= 0x1B0B06;		// 没有找到您的挂机记录
	eErrorcodeTower_HaveHosting 		= 0x1B0B07;		// 您正在其他楼层挂机
	eErrorcodeTower_BeInFight			= 0x1B0B08;		// 战斗中不能挂机
	eErrorcodeTower_CantHostThisFloor 	= 0x1B0B09;		// 您不能在本层挂机

	eErrorcodeTower_GetHostRecordError1 = 0x1B0D01;		// 没有找到你的挂机记录
	eErrorcodeTower_NotHosting 			= 0x1B0D02;		// 您没有在任何一层挂机
	eErrorcodeTower_HostFloorIsInvalid	= 0x1B0D03;		// 您挂机的楼层是非法的
	eErrorcodeTower_CantFindHostSlot 	= 0x1B0D04;		// 在本楼层没有找到你挂机的位置
	eErrorcodeTower_HostSlotIsBusy 		= 0x1B0D05;		// 您挂机位置比较繁忙, 请稍后再试

	eErrorcodeTower_CantClearTowerCD	= 0x1B0F01;		// 您的VIP等级太低，不能清除CD
	eErrorcodeTower_DontClearTowerCD	= 0x1B0F02;		// 不需要清除CD
	eErrorcodeTower_MoneyNotEnough		= 0x1B0F03;		// 您的魂玉不足
	eErrorcodeTower_GetPriceInvalid 	= 0x1B0F04;		// 策划小哥没有定价哦

	eErrorcodeTower_CantFindHostRecord 	= 0x1B1B01;		// 没有找到你的挂机信息
	eErrorcodeTower_UsedTowerShieldItem	= 0x1B1B02;		// 您已经使用过免战牌了
	eErrorcodeTower_ProtectTimeTooLong	= 0x1B1B03;		// 小样，你以为时间是乱填的吗
	eErrorcodeTower_HostFloorIsInvalid1	= 0x1B1B04;		// 你没有在本楼层挂机
	eErrorcodeTower_ShieldItemNotEnough	= 0x1B1B05;		// 您没有6小时护盾道具，无法实施保护
};

// 获取爬塔楼层信息
message MessageGetTowerInfoRequest
{
	optional MessageTower 			id 			= 1 [ default = eMessageTower_TowerInfo_C ];
};
message MessageGetTowerInfoResponse
{
	message RoleInfo
	{
		required 	uint64 			roleid 		= 1;	// 角色ID
		required 	uint32 			heroid 		= 2;	// 英雄ID
		required 	uint32 			viplevel 	= 3;	// vip等级
	};

	optional MessageTower 			id 				= 1 [ default = eMessageTower_TowerInfo_S ];
	required uint32 				floor			= 2;	// 当前楼层
	required uint32 				hisfloor 		= 3;	// 历史楼层
	required uint32 				hostfloor		= 4;	// 挂机楼层
	required uint32 				hostslot 		= 5;	// 挂机位置
	required uint64 				hosttimestamp 	= 6;	// 挂机开始时间
	required uint64 				protecttimestamp= 7;	// 护盾结束时间
	required uint32 				gotrewards		= 8;	// 领取标识
	required uint32 				robtimes 		= 9;	// 抢劫次数
	required uint64 				robtimestamp 	= 10;	// 上次抢劫事件
	repeated RoleInfo 				recentlist 		= 11;	// 最近过关的玩家列表
};

// 获取爬塔挂机信息
message MessageGetFloorInfoRequest
{
	optional MessageTower 			id 			= 1 [ default = eMessageTower_FloorInfo_C ];
	required uint32 				lowfloor 	= 2;	// 最低楼层
	required uint32 				highfloor 	= 3;	// 最高楼层
};
message MessageGetFloorInfoResponse
{
	message FloorInfo
	{
		required uint32 			floor 		= 1;	// 楼层
		required uint32 			slots 		= 2;	// 占用的格子数
		required uint64				masterid 	= 3;	// 楼主ID
		required uint32 			heroid 		= 4;	// 英雄ID
		required string 			rolename 	= 5;	// 角色名
	};

	optional MessageTower 			id 			= 1 [ default = eMessageTower_FloorInfo_S ];
	repeated FloorInfo 				floors 		= 2;	// 楼层挂机信息
};

// 获取最近过关玩家信息
message MessageGetTowerRoleInfoRequest
{
	optional MessageTower 			id 			= 1 [ default = eMessageTower_GetRoleInfo_C ];
	required uint32 				floor 	 	= 2;	// 楼层
	required uint64 				roleid 		= 3;	// 角色ID
};
message MessageGetTowerRoleInfoResponse
{
	optional MessageTower 			id 			= 1 [ default = eMessageTower_GetRoleInfo_S ];
	required uint64 				reportid 	= 2;	// 战报ID
	required RoleBaseInfo 			role 		= 3;	// 角色信息
};

// 获取楼层挂机信息
message MessageGetFloorHostInfoRequest
{
	optional MessageTower 			id 			= 1 [ default = eMessageTower_FloorHostInfo_C ];
	required uint32 				floor 		= 2;	// 楼层
};
message MessageGetFloorHostInfoResponse
{
	message HostInfo
	{
		required uint32 			slot 				= 1;	// 格子
		required uint64 			roleid 				= 2;	// 角色ID
		required uint32 			heroid 				= 3;	// 队长ID
		required string 			rolename 			= 4;	// 角色名
		required uint32 			battlepoint 		= 5;	// 总战斗力
		required uint64 			timestamp 			= 6;	// 挂机开始时间
		required uint64 			protecttimestamp  	= 7;	// 保护过期时间; 0-无护盾
	};

	optional MessageTower 			id 			= 1 [ default = eMessageTower_FloorHostInfo_S ];
	required uint32 				floor 		= 2;	// 楼层
	required uint64 				masterid 	= 3;	// 楼主ID
	repeated HostInfo 				hostslots 	= 4;	// 挂机列表
};

// 领取区域奖励
message MessageDrawRewardsRequest
{
	optional MessageTower 			id 			= 1 [ default = eMessageTower_DrawRewards_C ];
	optional uint32 				area 		= 2;	// 区域
};
message MessageDrawRewardsResponse
{
	optional MessageTower 			id 			= 1 [ default = eMessageTower_DrawRewards_S ];
	required uint32 				area 		= 2;	// 区域
	required uint32 				gotrewards 	= 3;	// 标识
	repeated Resource 				rewards 	= 4;	// 站台领取的奖励列表
};

// 选择楼层挂机
message MessageStartHostRequest
{
	optional MessageTower 			id 			= 1 [ default = eMessageTower_StartHost_C ];
	required uint32 				floor 		= 2;	// 楼层
	required uint32 				slot 		= 3;	// 位置
};
message MessageStartHostResponse
{
	optional MessageTower 			id 			= 1 [ default = eMessageTower_StartHost_S ];
	required uint32 				floor 		= 2;	// 楼层
	required uint32 				slot 		= 3;	// 位置
	required uint64 				timestamp 	= 4;	// 时间戳
};

// 取消楼层挂机
message MessageCancelHostRequest
{
	optional MessageTower 			id 			= 1 [ default = eMessageTower_CancelHost_C ];
};
message MessageCancelHostResponse
{
	optional MessageTower 			id 			= 1 [ default = eMessageTower_CancelHost_S ];
	required uint32 				floor 		= 2;	// 楼层
	required uint32 				slot 		= 3;	// 位置
};

// 清除掠夺CD
message MessageClearRobCDRequest
{
	optional MessageTower 			id 			= 1 [ default = eMessageTower_ClearRobCD_C ];
};
message MessageClearRobCDResponse
{
	optional MessageTower 			id 			= 1 [ default = eMessageTower_ClearRobCD_S ];
	required uint32 				price 		= 2;	// 元宝数额
};

// 挂机结束通知
message MessageEndHostNotify
{
	optional MessageTower 			id 			= 1 [ default = eMessageTower_EndHost_S ];
};

// 挂机保护
message MessageHostingProtectRequest
{
	optional MessageTower 			id 		 	= 1 [ default = eMessageTower_HostingProtect_C ];
	required uint32 				protect 	= 2;	// 保护时间
};
message MessageHostingProtectResponse
{
	optional MessageTower 			id 		 	= 1 [ default = eMessageTower_HostingProtect_S ];
	required uint32 				protect 	= 2;	// 保护时间
	required uint64 				expiretime 	= 3;	// 保护失效时间
};
