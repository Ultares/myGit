package msg.escort;

import "escorttype.proto";

//
// 命令字定义
//

enum MessageEscort
{
	eMessageEscort_GetEscortInfo_C 				= 0x1D01;		// 获取护送基本信息请求
	eMessageEscort_GetEscortInfo_S				= 0x1D02;		// 获取护送基本信息回应
	eMessageEscort_GetCargoInfo_C 				= 0x1D03;		// 船货信息请求
	eMessageEscort_GetCargoInfo_S 				= 0x1D04;		// 船货信息回应
	eMessageEscort_ChooseFriend_C 				= 0x1D05;		// 选择护送好友请求
	eMessageEscort_ChooseFriend_S 				= 0x1D06;		// 选择护送好友回应
	eMessageEscort_RefreshCargo_C	 			= 0x1D07;		// 刷新船货请求
	eMessageEscort_RefreshCargo_S 				= 0x1D08;		// 刷新船货回应
	eMessageEscort_StartEscort_C 				= 0x1D09;		// 开始护送请求
	eMessageEscort_StartEscort_S 				= 0x1D0A;		// 开始护送回应
	eMessageEscort_GetReward_C 					= 0x1D0B;		// 护送奖励领取请求
	eMessageEscort_GetReward_S 					= 0x1D0C;		// 护送奖励领取回应
	eMessageEscort_GetRobRecord_C				= 0x1D0D;		// 获取被拦截信息请求
	eMessageEscort_GetRobRecord_S 				= 0x1D0E;		// 获取被拦截信息回应
	eMessageEscort_Detect_C 					= 0x1D0F;		// 侦查请求
	eMessageEscort_Detect_S 					= 0x1D10;		// 侦查回应
	eMessageEscort_GetDetectList_C 				= 0x1D11;		// 查询侦查列表请求
	eMessageEscort_GetDetectList_S 				= 0x1D12;		// 查询侦查列表回应
	eMessageEscort_NotifyCargoResult_S 			= 0x1D13;		// 通知船货被成功拦截
	eMessageEscort_NotifyRobTimes_S 			= 0x1D14;		// 通知客户端更新拦截次数
	eMessageEscort_Inspire_C 					= 0x1D15;		// 鼓舞请求
	eMessageEscort_Inspire_S 					= 0x1D16;		// 鼓舞回应
	eMessageEscort_NotifyRobbedTimes_S 			= 0x1D17;		// 通知客户端船货被拦截的次数
};

//
// 错误码定义
//

enum ErrorcodeEscort
{
	eErrorcodeEscort_Success 					= 0x000000;		// 成功

	eErrorcodeEscort_NotOpen1 					= 0x1D0100;		// 系统暂未开放

	eErrorcodeEscort_NotOpen2 					= 0x1D0300;		// 系统暂未开放
	eErrorcodeEscort_EscortNot 					= 0x1D0301;		// 不在护送中
	eErrorcodeEscort_CargoNotFind 				= 0x1D0302;		// 未找到船货记录

	eErrorcodeEscort_NotOpen3 					= 0x1D0500;		// 系统暂未开放
	eErrorcodeEscort_Escorting 					= 0x1D0501;		// 正在护送中
	eErrorcodeEscort_ChooseNotFriend 			= 0x1D0502;		// 不是你的好友
	eErrorcodeEscort_ChooseHasHelp 				= 0x1D0503;		// 已经帮助过了
	eErrorcodeEscort_ChooseHelpTimesLimit       = 0x1D0504;		// 帮助次数已经用完
	eErrorcodeEscort_ChooseCoinNotEnough 		= 0x1D0505;		// 金币不足

	eErrorcodeEscort_NotOpen4 					= 0x1D0700;		// 系统暂未开放
	eErrorcodeEscort_Escorting1 				= 0x1D0701;		// 正在护送中
	eErrorcodeEscort_CargoQualityLimit 			= 0x1D0702;		// 船货已达最高品质
	eErrorcodeEscort_MoneyNotEnough 			= 0x1D0703;		// 魂玉不足
	eErrorcodeEscort_InnerError 				= 0x1D0704;		// 内部错误

	eErrorcodeEscort_NotOpen5 					= 0x1D0900;		// 系统暂未开放
	eErrorcodeEscort_Escorting2 				= 0x1D0901;		// 正在护送
	eErrorcodeEscort_EscortTimesLimit 			= 0x1D0902;		// 护送次数已达上限
	eErrorcodeEscort_HasHelp 					= 0x1D0903;		// 好友已经帮助过了
	eErrorcodeEscort_HelpTimesLimit 			= 0x1D0904;		// 好友帮助次数已达上限
	eErrorcodeEscort_CargoNotFind1 				= 0x1D0905;		// 未找到船货记录

	eErrorcodeEscort_NotOpen6 					= 0x1D0B00;		// 系统暂未开放
	eErrorcodeEscort_EscortNot1 				= 0x1D0B01;		// 不在护送中
	eErrorcodeEscort_EscortNotEnd 				= 0x1D0B03;		// 护送还未结束
	eErrorcodeEscort_CargoNotFind2 				= 0x1D0B04;		// 未找到船货记录
	eErrorcodeEscort_BagNotEnough 				= 0x1D0B05;		// 背包不足

	eErrorcodeEscort_NotOpen7 					= 0x1D0D00;		// 系统暂未开放

	eErrorcodeEscort_NotOpen8 					= 0x1D0F00;		// 系统暂未开放
	eErrorcodeEscort_RobbedTimesLimit 			= 0x1D0F01;		// 拦截次数已达上限
	eErrorcodeEscort_GameCoinNotEnough 			= 0x1D0F02;		// 金币不足

	eErrorcodeEscort_NotOpen9 					= 0x1D1100;		// 系统暂未开放

	eErrorcodeEscort_NotOpen10 					= 0x1D1500;		// 系统暂未开放
	eErrorcodeEscort_BuffLevelMax 				= 0x1D1501;		// buff已达最高等级
	eErrorcodeEscort_InspireMoneyNotEnough 		= 0x1D1502;		// 魂玉不足
	eErrorcodeEscort_InspireFailed 				= 0x1D1503;		// 鼓舞失败

};

// 查询护送信息
message MessageGetEscortInfoRequest
{
	optional MessageEscort 	 id 				= 1 [ default = eMessageEscort_GetEscortInfo_C ];
};
message MessageGetEscortInfoResponse
{
	optional MessageEscort 	id 					= 1 [ default = eMessageEscort_GetEscortInfo_S ];
	required uint32 		escorttimes 		= 2;			// 今日护送次数
	required uint32 		refreshtimes 		= 3;			// 货船刷新次数
	required uint32 		robtimes 			= 4;			// 今日拦截次数
	required uint32 		quality 			= 5;			// 船货品质
	required uint32 		status 				= 6;			// 状态:1:正在护送，0:没有护送
	required uint32 		detecttimes 		= 7;			// 侦查次数
	repeated uint64 		helplist 			= 8;			// 今日邀请过的好友列表
	optional uint64 		helper 				= 9;			// 护送好友
	required uint32 		bufflevel 			= 10;			// buff等级
};

// 查询船货信息
message MessageGetCargoInfoRequest
{
	optional MessageEscort 	id 					= 1 [ default = eMessageEscort_GetCargoInfo_C ];
};
message MessageGetCargoInfoResponse
{
	optional MessageEscort 	id 					= 1 [ default = eMessageEscort_GetCargoInfo_S ];
	required uint64 		starttime 			= 2;			// 船货护送开始时间
	required uint32 		robbedtimes 		= 3;			// 船货被拦截次数
	required uint32 		level 				= 4;			// 护送时玩家等级
	required uint32 		quality   			= 5;			// 船货品质
	required uint32 		bufflevel 			= 6;			// buff等级
};

// 选择好友
message MessageChooseFriendRequest
{
	optional MessageEscort 	id  				= 1 [ default = eMessageEscort_ChooseFriend_C ];
	required uint64 		helper 				= 2;			// 好友id
};
message MessageChooseFriendResponse
{
	optional MessageEscort 	id 					= 1 [ default = eMessageEscort_ChooseFriend_S ];
	required uint64 		helper 				= 2;			// 好友id
};

// 刷新船货
message MessageRefreshCargoRequest
{
	optional MessageEscort  id				    = 1 [ default = eMessageEscort_RefreshCargo_C ];
};
message MessageRefreshCargoResponse
{
	optional MessageEscort  id					= 1 [ default = eMessageEscort_RefreshCargo_S ];
	required uint32 		times 				= 2;			// 刷新次数
	required uint32 		quality 			= 3;			// 刷新到的船货品质
};

// 护送
message MessageStartEscortRequest
{
	optional MessageEscort  id					= 1 [ default = eMessageEscort_StartEscort_C ];
};
message MessageStartEscortResponse
{
	optional MessageEscort  id 					= 1 [ default = eMessageEscort_StartEscort_S ];
	required uint32 		level 				= 2;			// 护送船货时玩家等级
	required uint64 		starttime 			= 3;			// 船货护送开始时间
	required uint32         quality             = 4;            // 船货品质
	required uint32         bufflevel           = 5;            // buff等级
	required uint32 		escorttimes 		= 6;			// 护送次数
	required uint32 		status 				= 7;			// 护送状态
};

// 护送奖励领取
message MessageGetRewardRequest
{
	optional MessageEscort 	id 					= 1 [ default = eMessageEscort_GetReward_C ];
};
message MessageGetRewardResponse
{
	optional MessageEscort 	id 					= 1 [ default = eMessageEscort_GetReward_S ];
	repeated string 		robber 				= 2;			// 拦截者
	required uint32 		level 				= 3;			// 拥有者等级
	required uint32 		quality 			= 4;			// 船货品质
	required uint32 		robbedtimes 		= 5;			// 船货被拦截次数
	required uint32 		status 				= 6;			// 护送状态
};

// 查询战斗记录
message MessageGetRobRecordRequest
{
	optional MessageEscort 	id 					= 1 [ default = eMessageEscort_GetRobRecord_C ];
};
message MessageGetRobRecordResponse
{
	message Record
	{
		required uint32 	quality 			= 1;			// 船货品质
		required uint32 	ownerlevel			= 2;			// 船货等级
		required uint64 	id 					= 3;			// 拦截者id
		required string 	name 				= 4;			// 拦截者名字
		required uint32 	level 				= 5;			// 拦截者等级
		required uint32 	leader 				= 6;			// 拦截者队长id
		required uint32 	robtimes 			= 7;			// 拦截者拦截次数
		required uint32 	times 				= 8;			// 护送次数次数
		required uint32 	result 				= 9;			// 拦截结果 0: 平局，1: 获胜，2:失败
		required uint32 	status 				= 10;			// 复仇状态 1：已复仇
		required uint32 	battlepoint 		= 11;			// 拦截者战斗力
		repeated Hero 		formation 			= 12;			// 拦截者阵型
	};

	optional MessageEscort 	id 					= 1 [ default = eMessageEscort_GetRobRecord_S ];
	repeated Record 		records 			= 2;			// 被拦截记录
};

// 侦查
message MessageDetectRequest
{
	optional MessageEscort 	id 					= 1 [ default = eMessageEscort_Detect_C ];
};
message MessageDetectResponse
{
	optional MessageEscort  id					= 1 [ default = eMessageEscort_Detect_S ];
	required uint32 		detecttimes 		= 2;			// 侦查次数
	repeated Cargo 			cargos 				= 3;			// 刷新到的船货信息
};

// 查询侦查列表
message MessageGetDetectListRequest
{
	optional MessageEscort  id 					= 1 [ default = eMessageEscort_GetDetectList_C ];
};
message MessageGetDetectListResponse
{
	optional MessageEscort  id 					= 1 [ default = eMessageEscort_GetDetectList_S ];
	required uint32 		detecttimes 		= 2;			// 侦查次数
	repeated Cargo 			cargos 				= 3;			// 船货信息
};

// 通知侦查成功
message MessageNotifyCargoResult
{
	optional MessageEscort 	id 					= 1 [ default = eMessageEscort_NotifyCargoResult_S ];
	required uint64 		owner 				= 2;			// 船货拥有者
};

// 通知客户端更新拦截次数
message MessageNotifyRobTimes
{
	optional MessageEscort id 					= 1 [ default = eMessageEscort_NotifyRobTimes_S ];
	required uint32 	   times				= 2;			// 拦截次数
}

// 鼓舞
message MessageInspireRequest
{
	optional MessageEscort id 					= 1 [ default = eMessageEscort_Inspire_C ];
};
message MessageInspireResponse
{
	optional MessageEscort id 					= 1 [ default = eMessageEscort_Inspire_S ];
	required uint32 	   level 				= 2;			// buff等级
};

// 同步船货被拦截次数
message MessageNotifyRobbedTimes
{
	optional MessageEscort id 					= 1 [ default = eMessageEscort_NotifyRobbedTimes_S ];
	required uint32 	   times 				= 2;			// 被拦截次数
};
