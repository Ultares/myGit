package msg.rich;

import "base.proto";
import "richtype.proto";

//
// 命令字定义
//
enum MessageRich
{
	eMessageRich_RichInfo_C			= 0x1C01;		// 大富翁信息
	eMessageRich_RichInfo_S 		= 0x1C02;		// 返回大富翁信息
	eMessageRich_GotoSlot_S 		= 0x1C07;		// 前往第几格
	eMessageRich_DiceChange_S 		= 0x1C08;		// 同步骰子个数
	eMessageRich_Dice_C				= 0x1C09;		// 投掷骰子
	eMessageRich_Dice_S 			= 0x1C0A;		// 投掷骰子返回
	eMessageRich_ThrowDice_C		= 0x1C0B;		// 投掷骰子, 用于玩法
	eMessageRich_ThrowDice_S		= 0x1C0C;		// 投掷骰子返回
	eMessageRich_OpenBox_C 			= 0x1C0D;		// 开宝箱
	eMessageRich_OpenBox_S 			= 0x1C0E;		// 返回宝箱信息
	eMessageRich_RandEventID_S 		= 0x1C11;		// 通知随机事件ID
	eMessageRich_DrawTerminalGift_C = 0x1C12;		// 领取终点站奖励请求
	eMessageRich_DrawTerminalGift_S = 0x1C13;		// 返回领取终点站奖励
	eMessageRich_JumpFloor_C 		= 0x1C14;		// 直接跳转请求
	eMessageRich_JumpFloor_S 		= 0x1C15;		// 直接跳转回应
};

//
// 错误码定义
//
enum ErrorcodeRich
{
	eErrorcodeRich_Success 			= 0x000000;		// 成功

	eErrorcodeRich_RichSystemClosed	= 0x1C0100;		// 大富翁系统未开放

	eErrorcodeRich_DiceValueError	= 0x1C0900;		// 妈的!你到底想掷几点～
	eErrorcodeRich_PriceConfigError	= 0x1C0901;		// 稍等，策划小哥没定价哦～
	eErrorcodeRich_MoneyNotEnough	= 0x1C0902;		// 亲～您的钞票不够哦～
	eErrorcodeRich_DiceNotEnough	= 0x1C0903;		// 骰子数不够咯
	eErrorcodeRich_NotInThrowState	= 0x1C0904;		// 您这时候是不能掷骰子的～
	eErrorcodeRich_UseControllDiceLimit = 0x1C0905;	// 您遥控骰子使用的次数太多了...
	eErrorcodeRich_DiceCoinNotEnough= 0x1C0906;		// 金币不足

	eErrorcodeRich_NotInExecuteState= 0x1C0B00;		// 您现在的状态貌似不对哦～
	eErrorcodeRich_EventInvalid		= 0x1C0B01;		// 你所在格子没有触发事件呀～
	eErrorcodeRich_CantThrowDice	= 0x1C0B02;		// 丫的～掷嘛骰子呀～

	eErrorcodeRich_NotInExecuteState2= 0x1C0D00;	// 您现在的状态貌似不对哦～
	eErrorcodeRich_EventInvalid2	= 0x1C0D01;		// 你所在格子没有触发事件呀～
	eErrorcodeRich_CantOpenBox		= 0x1C0D02;		// 您现在还不能开宝箱哦～
	eErrorcodeRich_IndexInvalid		= 0x1C0D03;		// 您选错了宝箱
	eErrorcodeRich_BagSpaceFull		= 0x1C0D04;		// 您的背包已经满了

	eErrorcodeRich_NotInExecuteState3= 0x1C1200;	// 您现在的状态貌似不对哦～
	eErrorcodeRich_EventInvalid3	= 0x1C1201;		// 你所在格子没有触发事件呀～
	eErrorcodeRich_CantDrawRewards 	= 0x1C1203;		// 您现在不能领取终点站的奖励
	eErrorcodeRich_RewardIDInvalid	= 0x1C1204;		// 亲～策划小哥配置配错了
	eErrorcodeRich_BagSpaceFull2	= 0x1C1205;		// 您的背包已经满了

	eErrorcodeRich_JumpStateInvalid = 0x1C1400;		// 状态不对
	eErrorcodeRich_JumpCanNot 		= 0x1C1401;		// 当前层不可以使用跳转
	eErrorcodeRich_JumpMoneyNot 	= 0x1C1402;		// 魂玉不足，请充值
	eErrorcodeRich_JumpInnerError 	= 0x1C1403;		// 跳转内部错误
};

// 获取大富翁信息
message MessageRichInfoRequest
{
	optional MessageRich 			id 			= 1 [ default = eMessageRich_RichInfo_C ];
};
message MessageRichInfoResponse
{
	optional MessageRich 			id 			= 1 [ default = eMessageRich_RichInfo_S ];
	required RichState 				state 		= 2;	// 本局状态
	required uint32 				dicecount	= 3;	// 遥控骰子个数
	optional RichInfo 				richinfo 	= 4;	// 大富翁信息
};

// 前往第几格
message MessageRichGotoSlot
{
	optional MessageRich 			id 			= 1 [ default = eMessageRich_GotoSlot_S ];
	required int32 					step 		= 2;	// 步骤
	required uint32 				slot 		= 3;	// 第几格
};

// 同步骰子个数
message MessageRichDiceChange
{
	optional MessageRich 			id 			= 1 [ default = eMessageRich_DiceChange_S ];
	required uint32 				dicecount 	= 2;	// 使用的骰子个数
	required uint32 				ctrlcount 	= 3;	// 遥控骰子个数
};

// 投掷骰子
message MessageRichDiceRequest
{
	optional MessageRich 			id 			= 1 [ default = eMessageRich_Dice_C ];
	required uint32 				dicevalue 	= 2;	// 指定骰子数
};
message MessageRichDiceResponse
{
	optional MessageRich 			id 			= 1 [ default = eMessageRich_Dice_S ];
	required uint32 				step		= 2;	// 骰子数
};

// 投掷骰子(用于玩法)
message MessageRichThrowDiceRequest
{
	optional MessageRich 			id 			= 1 [ default = eMessageRich_ThrowDice_C ];
};
message MessageRichThrowDiceResponse
{
	optional MessageRich 			id 			= 1 [ default = eMessageRich_ThrowDice_S ];
	required uint32 				step 		= 2;	// 骰子数
};

// 开宝箱
message MessageOpenBoxRequest
{
	optional MessageRich 			id 			= 1 [ default = eMessageRich_OpenBox_C ];
	required uint32 				index 		= 2;	// 宝箱索引
};
message MessageOpenBoxResponse
{
	optional MessageRich 			id 			= 1 [ default = eMessageRich_OpenBox_S ];
	required uint32 				index 		= 2;	// 宝箱索引
	repeated Resource 				box 		= 3;	// 宝箱信息
};

// 通知随机事件ID
message MessageRandEventIDNotify
{
	optional MessageRich 			id 			= 1 [ default = eMessageRich_RandEventID_S ];
	required uint32 				slot 		= 2;	// 格子
	required uint32 				eventid 	= 3;	// 事件ID
};

// 终点站奖励通知
message MessageDrawTerminalGiftRequest
{
	optional MessageRich 			id 			= 1 [ default = eMessageRich_DrawTerminalGift_C ];
};
message MessageDrawTerminalGiftResponse
{
	optional MessageRich 			id 			= 1 [ default = eMessageRich_DrawTerminalGift_S ];
	repeated Resource 				rewards 	= 2;	// 终点站奖励
};

// 直接跳转
message MessageJumpFloorRequest
{
	optional MessageRich 			id 			= 1 [ default = eMessageRich_JumpFloor_C ];
};
message MessageJumpFloorResponse
{
	optional MessageRich 			id 			= 1 [ default = eMessageRich_JumpFloor_S ];
	required uint32 				mapid 		= 2;	// 地图id
	required RichInfo 				richinfo 	= 3;	// 大富翁信息
};
