package msg.item;

import "itemtype.proto";

//
// 命令字定义
//
enum MessageItem
{
	eMessageItem_DetailInfos_C		= 0x1301;					// 请求全部物品信息(背包中的，英雄身上的)
	eMessageItem_DetailInfos_S		= 0x1302;					// 物品详细信息
	eMessageItem_BagChangeList_S	= 0x1304;					// 背包信息变更
	eMessageItem_Dress_C			= 0x1305;					// 装备穿戴请求
	eMessageItem_Dress_S			= 0x1306;					// 装备穿戴回应
	eMessageItem_Undress_C			= 0x1307;   				// 卸装请求
	eMessageItem_Undress_S			= 0x1308;					// 卸装回应
	eMessageItem_Enhance_C			= 0x1309;					// 装备强化请求
	eMessageItem_Enhance_S			= 0x130A;					// 装备强化回应
	eMessageItem_Upgrade_C			= 0x130B;					// 装备进阶请求
	eMessageItem_Upgrade_S			= 0x130C;					// 装备进阶回应
	eMessageItem_UseProp_C			= 0x130D;					// 道具使用请求
	eMessageItem_UseProp_S			= 0x130E;					// 道具使用回应
	eMessageItem_Sell_C				= 0x130F;					// 物品出售请求
	eMessageItem_Sell_S 			= 0x1310;					// 物品出售回应
	eMessageItem_Extras_C			= 0x1311;					// 装备洗练请求
	eMessageItem_Extras_S			= 0x1312;					// 装备洗练回应
	eMessageItem_MountGem_C			= 0x1313;					// 镶嵌宝石请求
	eMessageItem_MountGem_S			= 0x1314;					// 镶嵌宝石回应
	eMessageItem_UnmountGem_C       = 0x1315;					// 摘取宝石请求
	eMessageItem_UnmountGem_S		= 0x1316;					// 摘取宝石回应
	eMessageItem_CompoundGem_C		= 0x1317;					// 宝石合成请求
	eMessageItem_CompoundGem_S		= 0x1318;					// 宝石合成回应
	eMessageItem_ActivateExtra_C	= 0x1319;					// 洗练属性激活请求
	eMessageItem_ActivateExtra_S	= 0x131A;					// 洗练属性激活回应
	eMessageItem_GetShopInfo_C		= 0x131B;					// 获取商店信息请求
	eMessageItem_GetShopInfo_S		= 0x131C;					// 获取商店信息回应
	eMessageItem_RefreshShop_C		= 0x131D;					// 刷新商店请求
	eMessageItem_RefreshShop_S		= 0x131E;					// 刷新商店回应
	eMessageItem_BuyArticle_C		= 0x131F;					// 购买商店商品请求
	eMessageItem_BuyArticle_S		= 0x1320;					// 购买商店商品回应
	eMessageItem_GetShopList_C 		= 0x1323;					// 获取商店列表
	eMessageItem_GetShopList_S 		= 0x1324;					// 商店列表返回
	eMessageItem_OpenShop_S 		= 0x1325;					// 新开放商店通知
	eMessageItem_CompoundEquip_C	= 0x1326;					// 装备碎片合成请求
	eMessageItem_CompoundEquip_S 	= 0x1327;					// 装备碎片合成回应
	eMessageItem_TrumpUpLevel_C		= 0x1328;					// 宝物精炼请求
	eMessageItem_TrumpUpLevel_S		= 0x1329;					// 宝物精炼回应
	eMessageItem_TrumpAwake_C		= 0x132A;					// 宝物觉醒请求
	eMessageItem_TrumpAwake_S 		= 0x132B;					// 宝物觉醒回应
	eMessageItem_TrumpAwakeReturn_C	= 0x132C;					// 宝物觉醒返还请求
	eMessageItem_TrumpAwakeReturn_S = 0x132D;					// 宝物觉醒返还回应
};

//
// 错误码定义
//
enum ErrorcodeItem
{
	eErrorcodeItem_Success                  = 0x000000;			// 成功

	eErrorcodeItem_DressInvalidHeroID       = 0x130501;			// 非法的英雄id
	eErrorcodeItem_DressInvalidEntityID     = 0x130502;			// 非法的物品实体id
	eErrorcodeItem_DressNotEquip            = 0x130503;			// 穿戴的不是装备类型
	eErrorcodeItem_DressLVNotEnough         = 0x130504;			// 英雄等级不足
	eErrorcodeItem_DressInvalidSex          = 0x130505;			// 穿戴性别不对
	eErrorcodeItem_DressInvalidOwner        = 0x130506;			// 物品不属于角色
	eErrorcodeItem_DressTrumpNotOpen 		= 0x130507;			// 宝物穿戴部位暂未开放

	eErrorcodeItem_UnderssInvalidHeroID     = 0x130701;			// 非法的英雄id
	eErrorcodeItem_UnderssInvalidEntityID   = 0x130702;			// 非法的物品实体id
	eErrorcodeItem_UndressNotEquip          = 0x130703;			// 物品非装备
	eErrorcodeItem_UndressSlotNotEnough     = 0x130704;			// 背包格子不足
	eErrorcodeItem_UndressInvalidOwner      = 0x130705;			// 物品不属于角色

	eErrorcodeItem_EnhanceInvalidHeroID     = 0x130901;			// 非法的英雄id
	eErrorcodeItem_EnhanceInvalidEntityID   = 0x130902;			// 非法的物品实体id
	eErrorcodeItem_EnhanceNotEquip          = 0x130903;			// 强化的不是装备
	eErrorcodeItem_EnhanceCoinNotEnough     = 0x130905;			// 金币不足
	eErrorcodeItem_EnhanceLVNotEnough       = 0x130906;			// 万事屋等级不足
	eErrorcodeItem_EnhanceInvalidOwner      = 0x130907;			// 物品不属于角色
	eErrorcodeItem_EnhanceInvalidOperate 	= 0x130908;			// 非法操作
	eErrorcodeItem_EnhanceVipLvNotEnough    = 0x130909;			// vip等级不足

	eErrorcodeItem_UpgradeInvalidEntityID   = 0x130B01;			// 非法的物品实体id
	eErrorcodeItem_UpgradeMaxQuality        = 0x130B02;			// 已达到最高品质
	eErrorcodeItem_UpgradeNotEquip          = 0x130B03;			// 非装备不可进阶
	eErrorcodeItem_UpgradeMatNotEnough      = 0x130B04;			// 进阶石不足
	eErrorcodeItem_UpgradeInvalidOwner      = 0x130B05;			// 物品不属于角色
	eErrorcodeItem_UpgradeCoinNotEnough     = 0x130B06;			// 金币不足
	eErrorcodeItem_UpgradeConfigError 		= 0x130B07;			// 配置文件出错

	eErrorcodeItem_UsePropInvalidEntityID   = 0x130D01;			// 非法的实体id
	eErrorcodeItem_UsePropLevelNotEnough    = 0x130D02;			// 道具使用等级不足
	eErrorcodeItem_UsePropNotForUse         = 0x130D03;			// 不可使用
	eErrorcodeItem_UseBagIsFull             = 0x130D04;			// 背包空间不足
	eErrorcodeItem_UsePropInvalidHeroID     = 0x130D05;			// 非法英雄id
	eErrorcodeItem_UsePropLimitLev          = 0x130D06;			// 英雄等级已达上限

	eErrorcodeItem_SellInvalidEntityID      = 0x130F01;			// 非法的实体id
	eErrorcodeItem_SellInvalidCount         = 0x130F02;			// 物品数量非法
	eErrorcodeItem_SellNotForSale           = 0x130F03;			// 物品不可出售
	eErrorcodeItem_SellItemNotInBag 		= 0x130F04;			// 背包中没有这个物品

	eErrorcodeItem_ExtraInvalidEntityID     = 0x131101;			// 非法的实体id
	eErrorcodeItem_ExtraNeedOneAttribute    = 0x131102;			// 至少需要洗练一条属性
	eErrorcodeItem_ExtraMoneyNotEnough      = 0x131103;			// 魂玉不足
	eErrorcodeItem_ExtraCoinNotEnough       = 0x131104;			// 金币不足
	eErrorcodeItem_ExtraNotActivate         = 0x131105;			// 洗练属性未激活
	eErrorcodeItem_ExtraInvalidPos          = 0x131106;			// 位置不合法

	eErrorcodeItem_MountInvalidEntityID  	= 0x131301;			// 非法的实体id
	eErrorcodeItem_MountGemNotEnough		= 0x131302;			// 勾玉不足
	eErrorcodeItem_MountSlotInvalid			= 0x131303;			// 孔槽不可镶嵌
	eErrorcodeItem_MountSlotNotMatch		= 0x131304;			// 勾玉类型与孔的类型不匹配
	eErrorcodeItem_MountConfigError 		= 0x131305;			// 配置文件出错

	eErrorcodeItem_UnmountInvalidEntityID	= 0x131501;			// 非法的实体id
	eErrorcodeItem_UnmountSlotInvalid		= 0x131502;			// 非法摘取位置
	eErrorcodeItem_UnmountSlotNotEnough		= 0x131503;			// 背包不足
	eErrorcodeItem_UnmountCoinNotEnough		= 0x131504;			// 金币不足

	eErrorcodeItem_CompoundInvalidEntityID  = 0x131701;			// 非法的实体id
	eErrorcodeItem_CompoundSlotInvalid		= 0x131702;			// 该位置没有勾玉
	eErrorcodeItem_CompoundMaxLevel			= 0x131703;			// 勾玉已到最高等级
	eErrorcodeItem_CompoundCoinNotEnough	= 0x131704;			// 金币不足
	eErrorcodeItem_CompoundGemNotEnough		= 0x131705;			// 低级勾玉不足
	eErrorcodeItem_CompoundInnerError		= 0x131706;			// 配置错误
	eErrorcodeItem_CompoundBagNotEnough 	= 0x131707;			// 背包不足

	eErrorcodeItem_ActivateInvalidEntityID  = 0x131901;			// 非法的实体id
	eErrorcodeItem_ActivateLVNotEnough      = 0x131902;			// 战队等级不足
	eErrorcodeItem_ActivateQualityNotEnough = 0x131903;			// 品质不足
	eErrorcodeItem_ActivateCoinNotEnough    = 0x131904;			// 金币不足
	eErrorcodeItem_ActivateHasActivate		= 0x131905;			// 已经激活了

	eErrorcodeItem_ShopInfoNotOpen 			= 0x131B01;			// 商店暂未开启

	eErrorcodeItem_ShopRefreshNotOpen		= 0x131D01;			// 商店暂未开启
	eErrorcodeItem_ShopRefreshInnerError	= 0x131D02;			// 内部错误
	eErrorcodeItem_ShopRefreshCoinNotEnough = 0x131D03;			// 刷新费用不足

	eErrorcodeItem_ShopBuyNotOpen 			= 0x131F01;			// 商店暂未开启
	eErrorcodeItem_ShopBuyNotSell			= 0x131F02;			// 商品已售罄
	eErrorcodeItem_ShopBuySlotNotEnough		= 0x131F03;			// 背包不足
	eErrorcodeItem_ShopBuyCoinNotEnough		= 0x131F04;			// 购买费用不足
	eErrorcodeItem_ShopBuyConfigError 		= 0x131F05;			// 配置出错

	eErrorcodeItem_CompoundEquipInvalidID 	= 0x132601;			// 非法的实体ID
	eErrorcodeItem_CompoundEquipBagNot 		= 0x132602;			// 背包不足
	eErrorcodeItem_CompoundEquipSuiNot 	 	= 0x132603;			// 碎片不足
	eErrorcodeItem_CompoundEquipCoinNot		= 0x132604;			// 金币不足
	eErrorcodeItem_CompoundConfigError 		= 0x132605;			// 配置文件出错

	eErrorcodeItem_TrumpUpInvalidID 		= 0x132801;			// 非法的实体id
	eErrorcodeItem_TrumpUpInvalidType 		= 0x132802;			// 物品类型不是宝物
	eErrorcodeItem_TrumpUpLVLimit 			= 0x132803;			// 宝物已达精炼等级上限
	eErrorcodeItem_TrumpUpCoinNotEnough 	= 0x132804;			// 金币不足
	eErrorcodeItem_TrumpUpMatZero  			= 0x132805;			// 请放入至少一种材料

	eErrorcodeItem_TrumpAwakeInvalidID 		= 0x132A01;			// 非法的实体id
	eErrorcodeItem_TrumpAwakeInvalidType 	= 0x132A02;			// 物品类型不是宝物
	eErrorcodeItem_TrumpAwakeMatCount 		= 0x132A03;			// 材料个数不足
	eErrorcodeItem_TrumpAwakeCoin 			= 0x132A04;			// 觉醒费用不足
	eErrorcodeItem_TrumpAwakeLevelLimit		= 0x132A05;			// 觉醒等级已达上限
	eErrorcodeItem_TrumpAwakeConfigError    = 0x132A06;			// 配置出错

	eErrorcodeItem_TrumpRAwakeInvalidID 	= 0x132C01;			// 非法的实体id
	eErrorcodeItem_TrumpRAwakeInvalidType 	= 0x132C02;			// 物品类型不是宝物
	eErrorcodeItem_TrumpRAwakeCoin 			= 0x132C03;			// 觉醒返还费用不足
	eErrorcodeItem_TrumpRAwakeBagNot 		= 0x132C04;			// 背包空间不足
	eErrorcodeItem_TrumpRAwakeLevelNot 		= 0x132C05;			// 宝物还未觉醒
	eErrorcodeItem_TrumpRConfigError 		= 0x132C06;			// 配置出错
}

// 所有物品的详细信息
message MessageItemDetailInfosRequest
{
	optional MessageItem 		id 		= 1 [ default = eMessageItem_DetailInfos_C ];
}
message MessageItemDetailInfos
{
	optional MessageItem		id		= 1 [ default = eMessageItem_DetailInfos_S ];
	repeated ItemDetailInfo		items	= 2;
};

// 背包信息变更
message MessageBagChangeList
{
	message Change
	{
		required uint64		entityid	= 1;					 // 实体ID
		required uint32		count		= 2;					 // 个数
		required uint32		place		= 3;					 // 存储位置
	};

	optional MessageItem	id			= 1 [ default = eMessageItem_BagChangeList_S ];
	repeated ItemDetailInfo addlist		= 2;  					// 添加列表
	repeated uint64			deletelist	= 3 [ packed = true ];	// 删除列表
	repeated Change			modifylist	= 4;					// 改变列表
};

// 装备穿戴
message MessageDressRequest
{
	optional MessageItem 	id 			= 1 [ default = eMessageItem_Dress_C ];
	required uint64 		entityid 	= 2;   					 // 装备实体id
	required uint32 		heroid 		= 3;   					 // 英雄id
};
message MessageDressResponse
{
	optional MessageItem 	id 			= 1 [ default = eMessageItem_Dress_S ];
	required uint64 		entityid 	= 2;					// 装备实体id
	required uint32 		heroid 		= 3;					// 英雄id
	optional uint64 		undressid	= 4;					// 脱下来的装备
};

// 卸装
message MessageUndressRequest
{
	optional MessageItem 	id 			= 1 [ default = eMessageItem_Undress_C ];
	required uint64 		entityid 	= 2;					// 装备实体id
};
message MessageUndressResponse
{
	optional MessageItem 	id 			= 1 [ default = eMessageItem_Undress_S ];
	required uint64 		entityid 	= 2;					// 装备实体id
	required uint32 		heroid 		= 3; 					// 英雄id
};

// 装备强化
message MessageEnhanceRequest
{
	optional MessageItem 	id 			= 1 [ default = eMessageItem_Enhance_C ];
	required uint64 		entityid 	= 2;					// 装备实体id
	required uint32 		operate 	= 3;					// 操作类型:1:强化，2:一键强化
};
message MessageEnhanceResponse
{
	optional MessageItem 	id 			= 1 [ default = eMessageItem_Enhance_S ];
	required uint64 		entityid 	= 2;					// 装备实体id
	required uint32 		level 		= 4; 					// 强化等级
	repeated uint32     	gems        = 5 [ packed = true ];  // 镶嵌
};

// 装备进阶
message MessageUpgradeRequest
{
	optional MessageItem 	id 			= 1 [ default = eMessageItem_Upgrade_C ];
	required uint64 		entityid 	= 2;					// 装备实体id
};
message MessageUpgradeResponse
{
	optional MessageItem 	id 			= 1 [ default = eMessageItem_Upgrade_S ];
	required uint64 		entityid 	= 2;					// 装备实体id
	required uint32 		baseid 		= 3;					// 装备基础id
	required uint32 		quality 	= 4;					// 装备品质
	required uint32 		level 		= 5;					// 强化等级
};

// 道具使用
message MessageUsePropRequest
{
	optional MessageItem 	id 			= 1 [ default = eMessageItem_UseProp_C ];
	required uint64 		entityid 	= 2;					// 道具实体id
	required uint32 		count 		= 3;					// 道具个数
	optional string 		params 		= 4;					// 参数
};
message MessageUsePropResponse
{
	optional MessageItem 	id 			= 1 [ default = eMessageItem_UseProp_S ];
	required int32 			result		= 2;					// 使用结果
};

// 出售物品
message MessageSellRequest
{
	message  ItemUnit
	{
		required uint64 	entityid 	= 1;					// 物品实体id
		required uint32 	count 		= 2;					// 数量
	};

	optional MessageItem 	id 			= 1 [ default = eMessageItem_Sell_C ];
	repeated ItemUnit 		items 		= 2;					// 物品出售列表
};
message MessageSellResponse
{
	optional MessageItem 	id 			= 1 [ default = eMessageItem_Sell_S ];
	required uint32 		price 		= 2;					// 价格
};

// 洗练
message MessageExtrasRequest
{
	message ExtraUnit
	{
		required uint32 	pos 		= 1;					// 位置(1->3)
		required uint32 	state 		= 2;					// 状态(1:锁定)
	};

	optional MessageItem 	id 			= 1 [ default = eMessageItem_Extras_C ];
	required uint64 		entityid 	= 2;					// 装备实体id
	repeated ExtraUnit 		extra 		= 3;					// 锁定属性列表
};
message MessageExtrasResponse
{
	optional MessageItem  	id 			= 1 [ default = eMessageItem_Extras_S ];
	required uint64 		entityid 	= 2;					// 装备实体id
	repeated Extra 			extras		= 3;					// 洗练
};

// 镶嵌宝石
message MessageMountGemRequest
{
	optional MessageItem 	id 			= 1 [ default = eMessageItem_MountGem_C ];
	required uint64 		entityid 	= 2;					// 装备id
	required uint32 		slot 		= 3;					// 孔的位置(从0开始)
	required uint32 		baseid 		= 4; 					// 勾玉id
};
message MessageMountGemResponse
{
	optional MessageItem 	id 			= 1 [ default = eMessageItem_MountGem_S ];
	required uint64			entityid 	= 2;					// 装备id
	required uint32 		slot 		= 3;					// 当前操作的孔
	repeated uint32     	gems        = 4 [ packed = true ];  // 镶嵌
};

// 摘取宝石
message MessageUnmountGemRequest
{
	optional MessageItem 	id 			= 1 [ default = eMessageItem_UnmountGem_C ];
	required uint64 		entityid 	= 2;					// 装备id
	required uint32 		slot 	 	= 3;					// 孔的位置(从0开始)
};
message MessageUnmountGemResponse
{
	optional MessageItem 	id 			= 1 [ default = eMessageItem_UnmountGem_S ];
	required uint64 		entityid 	= 2;					// 装备id
	repeated uint32     	gems        = 3 [ packed = true ];  // 镶嵌
};

// 勾玉合成
message MessageCompoundGemRequest
{
	optional MessageItem 	id 			= 1 [ default = eMessageItem_CompoundGem_C ];
	required uint64 		entityid 	= 2;					// 实体id
	optional uint32 		operate 	= 3 [ default = 0 ];	// 0: 合成，1:全部合成
	optional uint32 		slot 		= 4; 					// 装备孔槽(从0开始)
};
message MessageCompoundGemResponse
{
	optional MessageItem 	id 			= 1 [ default = eMessageItem_CompoundGem_S ];
	required uint32 		baseid 		= 2;					// 勾玉id
	optional uint64 		entityid 	= 3;					// 装备实体id
	repeated uint32     	gems        = 4 [ packed = true ];  // 镶嵌
};

// 洗练属性激活
message MessageActivateExtraRequest
{
	optional MessageItem 	id 			= 1 [ default = eMessageItem_ActivateExtra_C ];
	required uint64 		entityid	= 2; 					// 装备实体id
};
message MessageActivateExtraResponse
{
	optional MessageItem 	id 			= 1 [ default = eMessageItem_ActivateExtra_S ];
	required uint64 		entityid 	= 2;					// 装备实体id
	repeated Extra 			extras 		= 3;					// 洗练属性
};

// 商店信息查询
message MessageGetShopInfoRequest
{
	optional MessageItem 	id 			= 1 [ default = eMessageItem_GetShopInfo_C ];
	required uint32			shopid		= 2;					// 商店id
};
message MessageGetShopInfoResponse
{
	optional MessageItem 	id 			= 1 [ default = eMessageItem_GetShopInfo_S ];
	required uint32 		shopid 		= 2;					// 商店id
	required uint32 		times		= 3;					// 刷新次数
	required uint32 		price 		= 4; 					// 刷新价格
	repeated Article 		articles 	= 5;					// 商品列表
};

// 商店刷新
message MessageRefreshShopRequest
{
	optional MessageItem 	id 			= 1 [ default = eMessageItem_RefreshShop_C ];
	required uint32 		shopid 		= 2;					// 商店id
};
message MessageRefreshShopResponse
{
	optional MessageItem 	id 			= 1 [ default = eMessageItem_RefreshShop_S ];
	required uint32 		shopid 		= 2;					// 商店id
	required uint32 		times 		= 3;					// 刷新次数
	required uint32 		price 		= 4; 					// 刷新价格
	repeated Article 		articles 	= 5;					// 商品列表
};

// 商店购买物品
message MessageBuyArticleRequest
{
	optional MessageItem 	id 			= 1 [ default = eMessageItem_BuyArticle_C ];
	required uint32 		shopid 		= 2;					// 商店id
	required uint32 		index 		= 3; 					// 商品所在格子下标(从1开始)
};
message MessageBuyArticleResponse
{
	optional MessageItem 	id 			= 1 [ default = eMessageItem_BuyArticle_S ];
	required uint32 		shopid 		= 2;					// 商店id
	required Article 		article		= 3; 					// 商品
};

// 商店列表
message MessageGetShopList
{
	optional MessageItem 	id 			= 1 [ default = eMessageItem_GetShopList_C ];
};
message MessageAllShopList
{
	optional MessageItem 	id 			= 1 [ default = eMessageItem_GetShopList_S ];
	repeated ShopInfo 		shoplist 	= 2;				// 商店列表
};

// 新开放商店通知
message MessageOpenShopNotify
{
	optional MessageItem 	id 			= 1 [ default = eMessageItem_OpenShop_S ];
	required ShopInfo 		shop 		= 2;				// 新开放商店通知
};

// 装备碎片合成
message MessageCompoundEquipRequest
{
	optional MessageItem 	id 			= 1 [ default = eMessageItem_CompoundEquip_C ];
	required uint64 		entityid 	= 2;					// 碎片id
	optional uint32 		operate 	= 3 [ default = 0 ];	// 0:合成，1:合成全部
};
message MessageCompoundEquipResponse
{
	optional MessageItem 	id 			= 1 [ default = eMessageItem_CompoundEquip_S ];
	required uint32 		baseid 		= 2;				// 合成后的装备配置id
};

// 宝物精炼
message MessageTrumpUpLevelRequest
{
	message Material
	{
		required uint64 	entityid 	= 1;					// 材料的实体id
		required uint32 	count 		= 2;					// 放入材料的个数
	};

	optional MessageItem 	id 			= 1 [ default = eMessageItem_TrumpUpLevel_C ];
	required uint64 		entityid 	= 2;					// 宝物实体id
	repeated Material  		materials 	= 3;					// 材料实体id
};
message MessageTrumpUpLevelResponse
{
	optional MessageItem 	id 			= 1 [ default = eMessageItem_TrumpUpLevel_S ];
	required uint64 		entityid  	= 2; 					// 宝物实体id
	required uint32 		point 		= 3; 					// 精炼点数
	required uint32 		level 		= 4;					// 精炼等级
	optional uint32 		coin 		= 5;					// 返还的金币
};

// 宝物觉醒
message MessageTrumpAwakeRequest
{
	optional MessageItem 	id 			= 1 [ default = eMessageItem_TrumpAwake_C ];
	required uint64 		entityid 	= 2;					// 宝物实体id
};
message MessageTrumpAwakeResponse
{
	optional MessageItem 	id 			= 1 [ default = eMessageItem_TrumpAwake_S ];
	required uint64 		entityid 	= 2; 					// 宝物实体id
	required uint32 		level 		= 3;					// 觉醒等级
};

// 宝物觉醒返还
message MessageTrumpAwakeReturnRequest
{
	optional MessageItem 	id 			= 1 [ default = eMessageItem_TrumpAwakeReturn_C ];
	required uint64 		entityid 	= 2;					// 宝物实体id
};
message MessageTrumpAwakeReturnResponse
{
	optional MessageItem 	id 			= 1 [ default = eMessageItem_TrumpAwakeReturn_S ];
	required uint64 		entityid 	= 2; 					// 宝物实体id
	required uint32 		level 		= 3;					// 觉醒等级
};
