/**
 * Created by yong.liu on 2015/5/21.
 */

var zlib = require('zlib');
var request = require('request');
var querystring = require('querystring');

var Ope = function (params) {
    this.port = params.port;
    this.host = params.host;

    this.options = {
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded'
        },
        jar: request.jar()
    };
};

module.exports = Ope;

Ope.prototype.get = function (path, callback) {
    this.options.url = 'http://' + this.host + ':' + this.port + path;

    var self = this;
    console.log('options <%s>', JSON.stringify(this.options));
    var req = request.get(this.options);

    req.on('response', function (res) {
        var chunks = [];

        res.on('data', function (chunk) {
            chunks.push(chunk);
        });

        res.on('end', function () {
            self.options.Cookie = self.options.jar.getCookieString(self.options.url);

            callback(chunks);
        });
    });

    req.on('error', function (err) {
        callback(err);
    });
};

Ope.prototype.request = function (path, param, callback) {
    this.options.url = 'http://' + this.host + ':' + this.port + path;
    this.options.body = querystring.stringify(param);

    var self = this;
    var req = request.post(this.options);

    req.on('response', function (res) {
        var chunks = [];

        res.on('data', function (chunk) {
            chunks.push(chunk);
        });

        res.on('end', function () {
            self.options.Cookie = self.options.jar.getCookieString(self.options.url);

            var buffer = Buffer.concat(chunks);
            var encoding = res.headers['content-encoding'];
            if (encoding == 'gzip') {
                zlib.gunzip(buffer, function (err, decoded) {
                    callback(decoded && decoded.toString());
                });
            } else if (encoding == 'deflate') {
                zlib.inflate(buffer, function (err, decoded) {
                    callback(decoded && decoded.toString());
                })
            } else {
                callback(buffer.toString());
            }
        });
    });

    req.on('error', function (err) {
        callback(err);
    });
};