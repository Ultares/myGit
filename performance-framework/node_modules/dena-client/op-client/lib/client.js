var request = require('request');
var util = require('util');
var httpreq = require('http').request
var querystring = require('querystring');

var Client = function () {
    this.fn = null;
    this.actions = [];
    this.caseData = {
        'wid': 1,
        'previous': false,
        debug: 1

    };
    this.options = {};
    this.fns = [];
    this.breathIntervalTime = 200;
    this.sendInterval = 6;
    this.responseOverTime = 30000
};

module.exports = Client;

Client.prototype.run = function () {

    var self = this;
    var timer = setInterval(breath, self.breathIntervalTime);

    function breath() {

        if (self.fn === null) {
            self.fn = self.actions.shift();
            return
        }
        if (self.fn() === undefined) {
            if (self.actions.length) {
                self.fn = self.actions.shift();
            } else {
                self.log('debug', 'Clear timer' + self.fns.length)
                clearInterval(timer);
            }
        }
    }
};

Client.prototype.randomIntTime = function (low, high) {
    var sendInterval = this.sendInterval || 6;
    var low = low || sendInterval * 500;
    var high = high || sendInterval * 1500;
    return Math.floor(Math.random() * (high - low + 1) + low);
}

Client.prototype.init = function (params, cb) {
    this.port = params.port;
    this.host = params.host;
    this.options = {
        agent: false,
        headers: {
            'content-type': 'text/plain'
        }
    };
    setImmediate(cb);
}

Client.prototype.getCurrentTime = function () {
    var self = this;
    var cTime = new Date().toLocaleString().split(' ').slice(0, 5).join(' ');
    return self.stylize(cTime, 'green');
}

Client.prototype.stylize = function (str, style) {
    var styles = {
        'bold': [1, 22],
        'italic': [3, 23],
        'underline': [4, 24],
        'cyan': [96, 39],
        'blue': [34, 39],
        'yellow': [33, 39],
        'green': [32, 39],
        'red': [31, 39],
        'grey': [90, 39],
        'green-hi': [92, 32],
    };
    return '\033[' + styles[style][0] + 'm' + str +
        '\033[' + styles[style][1] + 'm';
};

Client.prototype.log = function (level, msg) {
    var self = this;
    if (self.caseData.debug && level.toLowerCase() !== 'error') {
        console.log('[%s] %s : %s', self.getCurrentTime(), self.stylize(level.toUpperCase(), 'green'), msg);
    } else if (level.toLowerCase() == 'error') {
        console.log('[%s] %s : %s', self.getCurrentTime(), self.stylize('ERROR', 'red'), self.stylize(msg, 'red'));
    }
}

Client.prototype.httpRequest = function (path, body, cb) {
    var self = this;
    self.options.url = 'http://' + this.host + ':' + this.port + path;
    self.options.body = querystring.stringify(body);
    self.options.method = 'POST';

    request(self.options, function (err, res, body) {
        if (err || res.statusCode !== 200) {
            self.log('error', err || JSON.stringify(res))
        } else {
            self.log('debug', JSON.stringify(res))
            cb(res.statusCode, body)
        }
    })
    self.log('debug', 'Sending data ' + self.options.url + ' with body:' + self.options.body);
};
