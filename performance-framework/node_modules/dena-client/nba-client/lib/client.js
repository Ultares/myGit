var request = require('request');
var util = require('util');
var httpreq = require('http').request
var querystring = require('querystring');

var Client = function () {
    this.fn = null;
    this.actions = [];
    this.customValue = {};
    this.caseData = {
        'wid': 1,
        'previous': false,
        'ratemode': true,
        'debug': 0
    };
    this.options = {};
    this.exectimes = 4;
    this.debug = 0;
    this.scenario = false;
    this.scenario_index = 0;
    this.fns = [];
    this.breathIntervalTime = 200;
    this.thinkTimeMax = 12000;
    this.responseOverTime = 5000
};

module.exports = Client;

Client.prototype.run = function () {

    var self = this;
    var timer = setInterval(breath, self.breathIntervalTime);

    function breath() {

        if (self.fn === null) {
            self.fn = self.actions.shift();
            return
        }
        //console.log('self.fn ======>',self.fn)
        if (self.fn() === undefined) {
            if (self.actions.length) {
                if (self.scenario) {
                    self.fns.push(self.fn);
                }
                self.fn = self.actions.shift();
            } else {
                if (self.scenario) {
                    self.fns.push(self.fn);
                    self.actions = self.actions.concat(self.fns.slice(self.scenario_index, self.fns.length));
                    self.fns = [];
                    self.fn = null;
                    self.scenario_index = 0;
                    console.log('===============================================================');
                } else {
                    console.log('clear timer', self.fns.length);
                    clearInterval(timer);
                }
            }
        }
    }
};

Client.prototype.getThinkTime = function () {
    return Math.ceil(Math.random() * this.thinkTimeMax / 1000);
}

Client.prototype.randomIntTime = function (low, high) {
    //return 1000;
    var low = low || 8000;
    var high = this.thinkTimeMax || high;
    return Math.floor(Math.random() * (high - low + 1) + low);
}

Client.prototype.init = function (params, cb) {
    this.port = params.port;
    this.host = params.host;
    this.options = {
        headers: {
            "Content-Type": "text/plain"
        }
    };
    setImmediate(cb);
}

Client.prototype.httpRequest = function (path, body, cb) {
    var self = this;
    var headers = {
        'Content-Type': 'application/x-www-form-urlencoded'
    }

    var options = {
        hostname: self.host,
        port: self.port,
        method: 'POST',
        path: path,
        headers: headers
    };

    if (self.debug) {
        console.log('optinos.path ====>', options.path);
    }

    var req = httpreq(options, function (res) {
        res.setEncoding('utf8');
        var iMsg = '';
        res.on('data', function (chunk) {
            iMsg += chunk;
        });
        res.on('end', function () {
            if (self.debug) {
                console.log('Received iMsg %s -----> %s', options.path, iMsg);
            }
            data = JSON.parse(iMsg);
            if (data['err_code'] !== 0) {
                console.log('Error :=====>', iMsg, options.path);
                cb(res.statusCode, data);
            } else {
                if (self.debug) {
                    console.log('Received data ----->', data)
                }
                cb(res.statusCode, data);
            }
        });
    });

    req.on('error', function (e) {
        console.error('action : %s, error : %s', path, e.toString());
        cb(e);
    });

    body = querystring.stringify(body);

    if (self.debug) {
        console.log('Send data ====>\n%s:%s/api/%s\n%s', self.host, self.port, path, body);

    }

    req.write(body);
    req.end();
};
