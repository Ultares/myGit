var request = require('request');
var util = require('util');
var httpreq = require('http').request
var querystring = require('querystring');

var Client = function () {
    this.fn = null;
    this.actions = [];
    this.customValue = {};
    this.caseData = {
        'wid': 1,
        'previous': false,
    };
    this.options = {};
    this.exectimes = 4;
    this.debug = true;
    this.scenario = false;
    this.scenario_index = 12;
    this.fns = [];
    this.breathIntervalTime = 200;
    this.thinkTimeMax = 5000;
    this.responseOverTime = 5000
};

module.exports = Client;

Client.prototype.run = function () {

    var self = this;
    var timer = setInterval(breath, self.breathIntervalTime);

    function breath() {

        if (self.fn === null) {
            self.fn = self.actions.shift();
            return
        }
        if (self.fn() === undefined) {
            if (self.actions.length) {
                self.fn = self.actions.shift();
            } else {
                console.log('clear timer', self.fns.length);
                clearInterval(timer);
            }
        }
    }
};

Client.prototype.getThinkTime = function () {
    return Math.ceil(Math.random() * this.thinkTimeMax / 1000);
}

Client.prototype.randomIntTime = function (low, high) {
    var low = low || 3000;
    var high = this.thinkTimeMax || high;
    return Math.floor(Math.random() * (high - low + 1) + low);
}

Client.prototype.init = function (params, cb) {
    this.port = params.port;
    this.host = params.host;
    this.options = {
        headers: {
            "Content-Type": "application/json"
        }
    };
    setImmediate(cb);
}

Client.prototype.httpRequest = function (options, cb) {
    var self = this;
    var headers = {
        'Content-Type': 'application/json'
    }
    self.path = options['path']
    if (!!options['Authorization']) {
        headers['Authorization'] = options['Authorization'];
    }

    if (!!options['body']) {
        self.reqstr = querystring.stringify(options['body']);
        if (options['method'] === 'GET') {
            self.path += self.reqstr;
        } else if (options['method'] === 'POST') {
            self.body = JSON.stringify(options['body']);
            console.log('POST method......')
        }
    }
    var options_ = {
        hostname: self.host,
        port: self.port,
        method: options['method'],
        path: '/' + self.path,
        headers: headers
    };

    var req = httpreq(options_, function (res) {
        res['setEncoding']('utf8');
        var iMsg = '';
        res.on('data', function (chunk) {

            iMsg += chunk;
        });
        res.on('end', function () {
            data = JSON.parse(iMsg);
            if (res['statusCode'] !== 200) {
                console.log('Error=====>', iMsg);
            } else {
                if (self.debug) {
                    console.log('Received data ----->', data)
                }
                cb(res['statusCode'], data);
            }
        });
    });

    req.on('error', function (e) {
        console.error('action : %s%s, error : %s', self.host, options_['path'], e.toString());
        cb(e);
    });

    if (options['method'] === 'POST') {

        req.write(self.body);
    }

    if (!!self.debug)
        if (options['method'] === 'POST') {
            var cTime = new Date().toString()
            console.log('%s: %s <%s> to <%s:/%s>', cTime, options['method'], self.body, self.host, self.path);
        } else if (options['method'] === 'GET') {
            console.log('Send data -->%s:%s%s', self.host, self.port, options_['path']);
        }
    req.end();
};
